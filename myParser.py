# Generated from myParser.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0098")
        buf.write("\u0422\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\3\2\5\2\u00d2\n\2\3\2\3\2\3\3\6\3\u00d7\n\3\r\3\16")
        buf.write("\3\u00d8\3\3\3\3\3\3\3\3\3\3\5\3\u00e0\n\3\3\4\3\4\3\4")
        buf.write("\3\4\3\4\5\4\u00e7\n\4\3\5\3\5\3\5\3\5\3\5\5\5\u00ee\n")
        buf.write("\5\3\5\3\5\5\5\u00f2\n\5\5\5\u00f4\n\5\3\5\3\5\3\5\3\5")
        buf.write("\5\5\u00fa\n\5\3\5\3\5\3\5\3\5\3\5\5\5\u0101\n\5\3\5\3")
        buf.write("\5\3\5\3\5\5\5\u0107\n\5\3\5\3\5\3\5\7\5\u010c\n\5\f\5")
        buf.write("\16\5\u010f\13\5\3\6\3\6\3\6\3\6\3\6\5\6\u0116\n\6\3\6")
        buf.write("\3\6\3\6\5\6\u011b\n\6\3\7\3\7\3\b\5\b\u0120\n\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\5\b\u0128\n\b\3\t\3\t\5\t\u012c\n\t")
        buf.write("\3\n\3\n\5\n\u0130\n\n\3\n\5\n\u0133\n\n\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u013f\n\13\f")
        buf.write("\13\16\13\u0142\13\13\3\f\5\f\u0145\n\f\3\f\3\f\3\f\5")
        buf.write("\f\u014a\n\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0154")
        buf.write("\n\r\3\16\3\16\3\16\7\16\u0159\n\16\f\16\16\16\u015c\13")
        buf.write("\16\3\17\3\17\3\17\7\17\u0161\n\17\f\17\16\17\u0164\13")
        buf.write("\17\3\20\3\20\3\20\7\20\u0169\n\20\f\20\16\20\u016c\13")
        buf.write("\20\3\21\3\21\3\21\3\21\7\21\u0172\n\21\f\21\16\21\u0175")
        buf.write("\13\21\3\22\3\22\3\22\3\22\5\22\u017b\n\22\3\23\3\23\3")
        buf.write("\23\7\23\u0180\n\23\f\23\16\23\u0183\13\23\3\24\3\24\3")
        buf.write("\24\7\24\u0188\n\24\f\24\16\24\u018b\13\24\3\25\3\25\3")
        buf.write("\25\7\25\u0190\n\25\f\25\16\25\u0193\13\25\3\26\3\26\3")
        buf.write("\26\7\26\u0198\n\26\f\26\16\26\u019b\13\26\3\27\3\27\3")
        buf.write("\27\7\27\u01a0\n\27\f\27\16\27\u01a3\13\27\3\30\3\30\3")
        buf.write("\30\7\30\u01a8\n\30\f\30\16\30\u01ab\13\30\3\31\3\31\3")
        buf.write("\31\7\31\u01b0\n\31\f\31\16\31\u01b3\13\31\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\5\32\u01bb\n\32\3\33\3\33\3\34\3\34")
        buf.write("\3\34\7\34\u01c2\n\34\f\34\16\34\u01c5\13\34\3\35\3\35")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u01d0\n\36\5")
        buf.write("\36\u01d2\n\36\3\37\3\37\3\37\3\37\5\37\u01d8\n\37\3\37")
        buf.write("\3\37\3\37\3 \5 \u01de\n \3 \3 \3!\3!\5!\u01e4\n!\3!\3")
        buf.write("!\3\"\6\"\u01e9\n\"\r\"\16\"\u01ea\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\5#\u01f4\n#\3#\3#\3#\3#\3#\3#\5#\u01fc\n#\3$\3$\3$\3")
        buf.write("$\3$\3$\5$\u0204\n$\5$\u0206\n$\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u021a\n%\3%\3%\5%\u021e")
        buf.write("\n%\3%\3%\3%\5%\u0223\n%\3&\3&\5&\u0227\n&\3\'\3\'\3\'")
        buf.write("\3\'\3\'\5\'\u022e\n\'\5\'\u0230\n\'\3\'\3\'\3(\6(\u0235")
        buf.write("\n(\r(\16(\u0236\3)\3)\3)\3)\3)\5)\u023e\n)\3*\5*\u0241")
        buf.write("\n*\3*\5*\u0244\n*\3*\3*\3+\3+\5+\u024a\n+\3,\6,\u024d")
        buf.write("\n,\r,\16,\u024e\3-\3-\3.\3.\5.\u0255\n.\3/\3/\5/\u0259")
        buf.write("\n/\3\60\6\60\u025c\n\60\r\60\16\60\u025d\3\61\3\61\3")
        buf.write("\62\3\62\3\63\3\63\3\63\5\63\u0267\n\63\3\63\6\63\u026a")
        buf.write("\n\63\r\63\16\63\u026b\3\63\5\63\u026f\n\63\3\63\3\63")
        buf.write("\3\63\5\63\u0274\n\63\3\63\7\63\u0277\n\63\f\63\16\63")
        buf.write("\u027a\13\63\3\63\3\63\3\63\5\63\u027f\n\63\3\63\3\63")
        buf.write("\3\63\5\63\u0284\n\63\3\64\3\64\3\64\5\64\u0289\n\64\3")
        buf.write("\65\3\65\3\65\7\65\u028e\n\65\f\65\16\65\u0291\13\65\3")
        buf.write("\66\3\66\5\66\u0295\n\66\3\67\3\67\38\38\58\u029b\n8\7")
        buf.write("8\u029d\n8\f8\168\u02a0\138\38\38\39\39\39\39\39\39\5")
        buf.write("9\u02aa\n9\39\39\39\39\59\u02b0\n9\39\59\u02b3\n9\79\u02b5")
        buf.write("\n9\f9\169\u02b8\139\3:\3:\5:\u02bc\n:\3:\3:\5:\u02c0")
        buf.write("\n:\3:\5:\u02c3\n:\3;\3;\3;\5;\u02c8\n;\5;\u02ca\n;\3")
        buf.write("<\6<\u02cd\n<\r<\16<\u02ce\3=\3=\3>\3>\3?\5?\u02d6\n?")
        buf.write("\3?\3?\3@\3@\3A\3A\5A\u02de\nA\3A\5A\u02e1\nA\3B\3B\3")
        buf.write("B\7B\u02e6\nB\fB\16B\u02e9\13B\3C\3C\3C\3C\5C\u02ef\n")
        buf.write("C\3D\5D\u02f2\nD\3D\3D\3D\3E\3E\3E\3E\5E\u02fb\nE\3F\3")
        buf.write("F\3F\3F\3F\5F\u0302\nF\3G\3G\3G\5G\u0307\nG\3H\3H\5H\u030b")
        buf.write("\nH\3I\3I\5I\u030f\nI\3I\3I\3I\5I\u0314\nI\7I\u0316\n")
        buf.write("I\fI\16I\u0319\13I\3J\3J\3J\5J\u031e\nJ\5J\u0320\nJ\3")
        buf.write("J\3J\3K\3K\3K\5K\u0327\nK\3L\3L\3L\5L\u032c\nL\3L\3L\3")
        buf.write("M\3M\5M\u0332\nM\3N\3N\3O\3O\3P\3P\3P\3P\6P\u033c\nP\r")
        buf.write("P\16P\u033d\3Q\5Q\u0341\nQ\3Q\5Q\u0344\nQ\3Q\3Q\3Q\3Q")
        buf.write("\5Q\u034a\nQ\3R\3R\3R\7R\u034f\nR\fR\16R\u0352\13R\3S")
        buf.write("\3S\5S\u0356\nS\3S\5S\u0359\nS\3S\3S\5S\u035d\nS\3T\3")
        buf.write("T\5T\u0361\nT\3T\3T\3T\5T\u0366\nT\7T\u0368\nT\fT\16T")
        buf.write("\u036b\13T\3U\3U\3V\3V\5V\u0371\nV\3V\3V\3V\5V\u0376\n")
        buf.write("V\7V\u0378\nV\fV\16V\u037b\13V\3W\3W\3W\5W\u0380\nW\3")
        buf.write("W\3W\5W\u0384\nW\3X\3X\5X\u0388\nX\3Y\3Y\3Y\3Z\3Z\3Z\3")
        buf.write("Z\3[\3[\3[\3[\3[\3[\3\\\3\\\3\\\7\\\u039a\n\\\f\\\16\\")
        buf.write("\u039d\13\\\3]\3]\5]\u03a1\n]\3^\3^\3^\3^\3^\5^\u03a8")
        buf.write("\n^\3^\3^\5^\u03ac\n^\3^\5^\u03af\n^\3^\5^\u03b2\n^\3")
        buf.write("^\5^\u03b5\n^\3^\3^\5^\u03b9\n^\3_\3_\3_\5_\u03be\n_\3")
        buf.write("_\3_\3`\3`\3`\5`\u03c5\n`\3`\3`\5`\u03c9\n`\3`\3`\5`\u03cd")
        buf.write("\n`\3a\3a\3b\3b\5b\u03d3\nb\3b\3b\3b\5b\u03d8\nb\7b\u03da")
        buf.write("\nb\fb\16b\u03dd\13b\3c\3c\3c\5c\u03e2\nc\3d\3d\3d\3e")
        buf.write("\3e\3e\5e\u03ea\ne\3e\3e\3e\5e\u03ef\ne\3e\3e\3e\3e\3")
        buf.write("e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\5e\u041a\ne\3f\3f\3g\3g\3h\3h\3h\3\u024e\5\b\24pi\2")
        buf.write("\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write("\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\2\25\4\2{{\u0080\u0080\3\2wx\4\2Z\\`c\4\2zz\u0081")
        buf.write("\u0081\3\2\\^\3\2Z[\4\2efst\3\2qr\4\2ddgp\4\2--;;\4\2")
        buf.write("<<MM\4\2``uu\4\2\25\25QQ\3\2\32\33\4\2\24\24AA\3\2\65")
        buf.write("\67\3\2\3\b\5\2\u008d\u0092\u0095\u0095\u0097\u0098\5")
        buf.write("\2\u008c\u008c\u0094\u0094\u0096\u0096\2\u048c\2\u00d1")
        buf.write("\3\2\2\2\4\u00df\3\2\2\2\6\u00e6\3\2\2\2\b\u00f3\3\2\2")
        buf.write("\2\n\u011a\3\2\2\2\f\u011c\3\2\2\2\16\u011f\3\2\2\2\20")
        buf.write("\u0129\3\2\2\2\22\u0132\3\2\2\2\24\u0134\3\2\2\2\26\u0144")
        buf.write("\3\2\2\2\30\u0153\3\2\2\2\32\u0155\3\2\2\2\34\u015d\3")
        buf.write("\2\2\2\36\u0165\3\2\2\2 \u016d\3\2\2\2\"\u017a\3\2\2\2")
        buf.write("$\u017c\3\2\2\2&\u0184\3\2\2\2(\u018c\3\2\2\2*\u0194\3")
        buf.write("\2\2\2,\u019c\3\2\2\2.\u01a4\3\2\2\2\60\u01ac\3\2\2\2")
        buf.write("\62\u01b4\3\2\2\2\64\u01bc\3\2\2\2\66\u01be\3\2\2\28\u01c6")
        buf.write("\3\2\2\2:\u01d1\3\2\2\2<\u01d7\3\2\2\2>\u01dd\3\2\2\2")
        buf.write("@\u01e1\3\2\2\2B\u01e8\3\2\2\2D\u01fb\3\2\2\2F\u0205\3")
        buf.write("\2\2\2H\u0222\3\2\2\2J\u0226\3\2\2\2L\u022f\3\2\2\2N\u0234")
        buf.write("\3\2\2\2P\u023d\3\2\2\2R\u0240\3\2\2\2T\u0249\3\2\2\2")
        buf.write("V\u024c\3\2\2\2X\u0250\3\2\2\2Z\u0254\3\2\2\2\\\u0258")
        buf.write("\3\2\2\2^\u025b\3\2\2\2`\u025f\3\2\2\2b\u0261\3\2\2\2")
        buf.write("d\u0283\3\2\2\2f\u0288\3\2\2\2h\u028a\3\2\2\2j\u0292\3")
        buf.write("\2\2\2l\u0296\3\2\2\2n\u029e\3\2\2\2p\u02a9\3\2\2\2r\u02b9")
        buf.write("\3\2\2\2t\u02c9\3\2\2\2v\u02cc\3\2\2\2x\u02d0\3\2\2\2")
        buf.write("z\u02d2\3\2\2\2|\u02d5\3\2\2\2~\u02d9\3\2\2\2\u0080\u02db")
        buf.write("\3\2\2\2\u0082\u02e2\3\2\2\2\u0084\u02ea\3\2\2\2\u0086")
        buf.write("\u02f1\3\2\2\2\u0088\u02fa\3\2\2\2\u008a\u0301\3\2\2\2")
        buf.write("\u008c\u0306\3\2\2\2\u008e\u030a\3\2\2\2\u0090\u030c\3")
        buf.write("\2\2\2\u0092\u031a\3\2\2\2\u0094\u0326\3\2\2\2\u0096\u0328")
        buf.write("\3\2\2\2\u0098\u032f\3\2\2\2\u009a\u0333\3\2\2\2\u009c")
        buf.write("\u0335\3\2\2\2\u009e\u033b\3\2\2\2\u00a0\u0349\3\2\2\2")
        buf.write("\u00a2\u034b\3\2\2\2\u00a4\u035c\3\2\2\2\u00a6\u035e\3")
        buf.write("\2\2\2\u00a8\u036c\3\2\2\2\u00aa\u036e\3\2\2\2\u00ac\u037c")
        buf.write("\3\2\2\2\u00ae\u0387\3\2\2\2\u00b0\u0389\3\2\2\2\u00b2")
        buf.write("\u038c\3\2\2\2\u00b4\u0390\3\2\2\2\u00b6\u0396\3\2\2\2")
        buf.write("\u00b8\u03a0\3\2\2\2\u00ba\u03ab\3\2\2\2\u00bc\u03ba\3")
        buf.write("\2\2\2\u00be\u03cc\3\2\2\2\u00c0\u03ce\3\2\2\2\u00c2\u03d0")
        buf.write("\3\2\2\2\u00c4\u03e1\3\2\2\2\u00c6\u03e3\3\2\2\2\u00c8")
        buf.write("\u0419\3\2\2\2\u00ca\u041b\3\2\2\2\u00cc\u041d\3\2\2\2")
        buf.write("\u00ce\u041f\3\2\2\2\u00d0\u00d2\5N(\2\u00d1\u00d0\3\2")
        buf.write("\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d3\3\2\2\2\u00d3\u00d4")
        buf.write("\7\2\2\3\u00d4\3\3\2\2\2\u00d5\u00d7\5\u00caf\2\u00d6")
        buf.write("\u00d5\3\2\2\2\u00d7\u00d8\3\2\2\2\u00d8\u00d6\3\2\2\2")
        buf.write("\u00d8\u00d9\3\2\2\2\u00d9\u00e0\3\2\2\2\u00da\u00db\7")
        buf.write("T\2\2\u00db\u00dc\5\66\34\2\u00dc\u00dd\7U\2\2\u00dd\u00e0")
        buf.write("\3\2\2\2\u00de\u00e0\5\6\4\2\u00df\u00d6\3\2\2\2\u00df")
        buf.write("\u00da\3\2\2\2\u00df\u00de\3\2\2\2\u00e0\5\3\2\2\2\u00e1")
        buf.write("\u00e7\7\u0083\2\2\u00e2\u00e7\5\u00b0Y\2\u00e3\u00e7")
        buf.write("\5\u00b2Z\2\u00e4\u00e7\5\u00be`\2\u00e5\u00e7\5\u00cc")
        buf.write("g\2\u00e6\u00e1\3\2\2\2\u00e6\u00e2\3\2\2\2\u00e6\u00e3")
        buf.write("\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e6\u00e5\3\2\2\2\u00e7")
        buf.write("\7\3\2\2\2\u00e8\u00e9\b\5\1\2\u00e9\u00f4\5\4\3\2\u00ea")
        buf.write("\u00f1\5d\63\2\u00eb\u00ed\7T\2\2\u00ec\u00ee\5\u0090")
        buf.write("I\2\u00ed\u00ec\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee\u00ef")
        buf.write("\3\2\2\2\u00ef\u00f2\7U\2\2\u00f0\u00f2\5\u0092J\2\u00f1")
        buf.write("\u00eb\3\2\2\2\u00f1\u00f0\3\2\2\2\u00f2\u00f4\3\2\2\2")
        buf.write("\u00f3\u00e8\3\2\2\2\u00f3\u00ea\3\2\2\2\u00f4\u010d\3")
        buf.write("\2\2\2\u00f5\u00f6\f\7\2\2\u00f6\u00f9\7V\2\2\u00f7\u00fa")
        buf.write("\5\66\34\2\u00f8\u00fa\5\u0092J\2\u00f9\u00f7\3\2\2\2")
        buf.write("\u00f9\u00f8\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u00fc\7")
        buf.write("W\2\2\u00fc\u010c\3\2\2\2\u00fd\u00fe\f\6\2\2\u00fe\u0100")
        buf.write("\7T\2\2\u00ff\u0101\5\u0090I\2\u0100\u00ff\3\2\2\2\u0100")
        buf.write("\u0101\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u010c\7U\2\2")
        buf.write("\u0103\u0104\f\4\2\2\u0104\u0106\t\2\2\2\u0105\u0107\7")
        buf.write("C\2\2\u0106\u0105\3\2\2\2\u0106\u0107\3\2\2\2\u0107\u0108")
        buf.write("\3\2\2\2\u0108\u010c\5\6\4\2\u0109\u010a\f\3\2\2\u010a")
        buf.write("\u010c\t\3\2\2\u010b\u00f5\3\2\2\2\u010b\u00fd\3\2\2\2")
        buf.write("\u010b\u0103\3\2\2\2\u010b\u0109\3\2\2\2\u010c\u010f\3")
        buf.write("\2\2\2\u010d\u010b\3\2\2\2\u010d\u010e\3\2\2\2\u010e\t")
        buf.write("\3\2\2\2\u010f\u010d\3\2\2\2\u0110\u011b\5\b\5\2\u0111")
        buf.write("\u0116\7w\2\2\u0112\u0116\7x\2\2\u0113\u0116\5\f\7\2\u0114")
        buf.write("\u0116\7=\2\2\u0115\u0111\3\2\2\2\u0115\u0112\3\2\2\2")
        buf.write("\u0115\u0113\3\2\2\2\u0115\u0114\3\2\2\2\u0116\u0117\3")
        buf.write("\2\2\2\u0117\u011b\5\n\6\2\u0118\u011b\5\16\b\2\u0119")
        buf.write("\u011b\5\26\f\2\u011a\u0110\3\2\2\2\u011a\u0115\3\2\2")
        buf.write("\2\u011a\u0118\3\2\2\2\u011a\u0119\3\2\2\2\u011b\13\3")
        buf.write("\2\2\2\u011c\u011d\t\4\2\2\u011d\r\3\2\2\2\u011e\u0120")
        buf.write("\7~\2\2\u011f\u011e\3\2\2\2\u011f\u0120\3\2\2\2\u0120")
        buf.write("\u0121\3\2\2\2\u0121\u0127\7\60\2\2\u0122\u0128\5\20\t")
        buf.write("\2\u0123\u0124\7T\2\2\u0124\u0125\5~@\2\u0125\u0126\7")
        buf.write("U\2\2\u0126\u0128\3\2\2\2\u0127\u0122\3\2\2\2\u0127\u0123")
        buf.write("\3\2\2\2\u0128\17\3\2\2\2\u0129\u012b\5^\60\2\u012a\u012c")
        buf.write("\5\22\n\2\u012b\u012a\3\2\2\2\u012b\u012c\3\2\2\2\u012c")
        buf.write("\21\3\2\2\2\u012d\u012f\5t;\2\u012e\u0130\5\22\n\2\u012f")
        buf.write("\u012e\3\2\2\2\u012f\u0130\3\2\2\2\u0130\u0133\3\2\2\2")
        buf.write("\u0131\u0133\5\24\13\2\u0132\u012d\3\2\2\2\u0132\u0131")
        buf.write("\3\2\2\2\u0133\23\3\2\2\2\u0134\u0135\b\13\1\2\u0135\u0136")
        buf.write("\7V\2\2\u0136\u0137\5\66\34\2\u0137\u0138\7W\2\2\u0138")
        buf.write("\u0140\3\2\2\2\u0139\u013a\f\3\2\2\u013a\u013b\7V\2\2")
        buf.write("\u013b\u013c\58\35\2\u013c\u013d\7W\2\2\u013d\u013f\3")
        buf.write("\2\2\2\u013e\u0139\3\2\2\2\u013f\u0142\3\2\2\2\u0140\u013e")
        buf.write("\3\2\2\2\u0140\u0141\3\2\2\2\u0141\25\3\2\2\2\u0142\u0140")
        buf.write("\3\2\2\2\u0143\u0145\7~\2\2\u0144\u0143\3\2\2\2\u0144")
        buf.write("\u0145\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0149\7\33\2")
        buf.write("\2\u0147\u0148\7V\2\2\u0148\u014a\7W\2\2\u0149\u0147\3")
        buf.write("\2\2\2\u0149\u014a\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014c")
        buf.write("\5\30\r\2\u014c\27\3\2\2\2\u014d\u0154\5\n\6\2\u014e\u014f")
        buf.write("\7T\2\2\u014f\u0150\5~@\2\u0150\u0151\7U\2\2\u0151\u0152")
        buf.write("\5\30\r\2\u0152\u0154\3\2\2\2\u0153\u014d\3\2\2\2\u0153")
        buf.write("\u014e\3\2\2\2\u0154\31\3\2\2\2\u0155\u015a\5\30\r\2\u0156")
        buf.write("\u0157\t\5\2\2\u0157\u0159\5\30\r\2\u0158\u0156\3\2\2")
        buf.write("\2\u0159\u015c\3\2\2\2\u015a\u0158\3\2\2\2\u015a\u015b")
        buf.write("\3\2\2\2\u015b\33\3\2\2\2\u015c\u015a\3\2\2\2\u015d\u0162")
        buf.write("\5\32\16\2\u015e\u015f\t\6\2\2\u015f\u0161\5\32\16\2\u0160")
        buf.write("\u015e\3\2\2\2\u0161\u0164\3\2\2\2\u0162\u0160\3\2\2\2")
        buf.write("\u0162\u0163\3\2\2\2\u0163\35\3\2\2\2\u0164\u0162\3\2")
        buf.write("\2\2\u0165\u016a\5\34\17\2\u0166\u0167\t\7\2\2\u0167\u0169")
        buf.write("\5\34\17\2\u0168\u0166\3\2\2\2\u0169\u016c\3\2\2\2\u016a")
        buf.write("\u0168\3\2\2\2\u016a\u016b\3\2\2\2\u016b\37\3\2\2\2\u016c")
        buf.write("\u016a\3\2\2\2\u016d\u0173\5\36\20\2\u016e\u016f\5\"\22")
        buf.write("\2\u016f\u0170\5\36\20\2\u0170\u0172\3\2\2\2\u0171\u016e")
        buf.write("\3\2\2\2\u0172\u0175\3\2\2\2\u0173\u0171\3\2\2\2\u0173")
        buf.write("\u0174\3\2\2\2\u0174!\3\2\2\2\u0175\u0173\3\2\2\2\u0176")
        buf.write("\u0177\7f\2\2\u0177\u017b\7f\2\2\u0178\u0179\7e\2\2\u0179")
        buf.write("\u017b\7e\2\2\u017a\u0176\3\2\2\2\u017a\u0178\3\2\2\2")
        buf.write("\u017b#\3\2\2\2\u017c\u0181\5 \21\2\u017d\u017e\t\b\2")
        buf.write("\2\u017e\u0180\5 \21\2\u017f\u017d\3\2\2\2\u0180\u0183")
        buf.write("\3\2\2\2\u0181\u017f\3\2\2\2\u0181\u0182\3\2\2\2\u0182")
        buf.write("%\3\2\2\2\u0183\u0181\3\2\2\2\u0184\u0189\5$\23\2\u0185")
        buf.write("\u0186\t\t\2\2\u0186\u0188\5$\23\2\u0187\u0185\3\2\2\2")
        buf.write("\u0188\u018b\3\2\2\2\u0189\u0187\3\2\2\2\u0189\u018a\3")
        buf.write("\2\2\2\u018a\'\3\2\2\2\u018b\u0189\3\2\2\2\u018c\u0191")
        buf.write("\5&\24\2\u018d\u018e\7`\2\2\u018e\u0190\5&\24\2\u018f")
        buf.write("\u018d\3\2\2\2\u0190\u0193\3\2\2\2\u0191\u018f\3\2\2\2")
        buf.write("\u0191\u0192\3\2\2\2\u0192)\3\2\2\2\u0193\u0191\3\2\2")
        buf.write("\2\u0194\u0199\5(\25\2\u0195\u0196\7_\2\2\u0196\u0198")
        buf.write("\5(\25\2\u0197\u0195\3\2\2\2\u0198\u019b\3\2\2\2\u0199")
        buf.write("\u0197\3\2\2\2\u0199\u019a\3\2\2\2\u019a+\3\2\2\2\u019b")
        buf.write("\u0199\3\2\2\2\u019c\u01a1\5*\26\2\u019d\u019e\7a\2\2")
        buf.write("\u019e\u01a0\5*\26\2\u019f\u019d\3\2\2\2\u01a0\u01a3\3")
        buf.write("\2\2\2\u01a1\u019f\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2-")
        buf.write("\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a4\u01a9\5,\27\2\u01a5")
        buf.write("\u01a6\7u\2\2\u01a6\u01a8\5,\27\2\u01a7\u01a5\3\2\2\2")
        buf.write("\u01a8\u01ab\3\2\2\2\u01a9\u01a7\3\2\2\2\u01a9\u01aa\3")
        buf.write("\2\2\2\u01aa/\3\2\2\2\u01ab\u01a9\3\2\2\2\u01ac\u01b1")
        buf.write("\5.\30\2\u01ad\u01ae\7v\2\2\u01ae\u01b0\5.\30\2\u01af")
        buf.write("\u01ad\3\2\2\2\u01b0\u01b3\3\2\2\2\u01b1\u01af\3\2\2\2")
        buf.write("\u01b1\u01b2\3\2\2\2\u01b2\61\3\2\2\2\u01b3\u01b1\3\2")
        buf.write("\2\2\u01b4\u01ba\5\60\31\2\u01b5\u01b6\7|\2\2\u01b6\u01b7")
        buf.write("\5\66\34\2\u01b7\u01b8\7}\2\2\u01b8\u01b9\5\62\32\2\u01b9")
        buf.write("\u01bb\3\2\2\2\u01ba\u01b5\3\2\2\2\u01ba\u01bb\3\2\2\2")
        buf.write("\u01bb\63\3\2\2\2\u01bc\u01bd\t\n\2\2\u01bd\65\3\2\2\2")
        buf.write("\u01be\u01c3\5\62\32\2\u01bf\u01c0\7y\2\2\u01c0\u01c2")
        buf.write("\5\62\32\2\u01c1\u01bf\3\2\2\2\u01c2\u01c5\3\2\2\2\u01c3")
        buf.write("\u01c1\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\67\3\2\2\2\u01c5")
        buf.write("\u01c3\3\2\2\2\u01c6\u01c7\5\62\32\2\u01c79\3\2\2\2\u01c8")
        buf.write("\u01d2\5<\37\2\u01c9\u01d2\5R*\2\u01ca\u01d0\5> \2\u01cb")
        buf.write("\u01d0\5@!\2\u01cc\u01d0\5D#\2\u01cd\u01d0\5H%\2\u01ce")
        buf.write("\u01d0\5L\'\2\u01cf\u01ca\3\2\2\2\u01cf\u01cb\3\2\2\2")
        buf.write("\u01cf\u01cc\3\2\2\2\u01cf\u01cd\3\2\2\2\u01cf\u01ce\3")
        buf.write("\2\2\2\u01d0\u01d2\3\2\2\2\u01d1\u01c8\3\2\2\2\u01d1\u01c9")
        buf.write("\3\2\2\2\u01d1\u01cf\3\2\2\2\u01d2;\3\2\2\2\u01d3\u01d8")
        buf.write("\7\u0083\2\2\u01d4\u01d5\7\21\2\2\u01d5\u01d8\58\35\2")
        buf.write("\u01d6\u01d8\7\32\2\2\u01d7\u01d3\3\2\2\2\u01d7\u01d4")
        buf.write("\3\2\2\2\u01d7\u01d6\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9")
        buf.write("\u01da\7}\2\2\u01da\u01db\5:\36\2\u01db=\3\2\2\2\u01dc")
        buf.write("\u01de\5\66\34\2\u01dd\u01dc\3\2\2\2\u01dd\u01de\3\2\2")
        buf.write("\2\u01de\u01df\3\2\2\2\u01df\u01e0\7\177\2\2\u01e0?\3")
        buf.write("\2\2\2\u01e1\u01e3\7X\2\2\u01e2\u01e4\5B\"\2\u01e3\u01e2")
        buf.write("\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5")
        buf.write("\u01e6\7Y\2\2\u01e6A\3\2\2\2\u01e7\u01e9\5:\36\2\u01e8")
        buf.write("\u01e7\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01e8\3\2\2\2")
        buf.write("\u01ea\u01eb\3\2\2\2\u01ebC\3\2\2\2\u01ec\u01ed\7*\2\2")
        buf.write("\u01ed\u01ee\7T\2\2\u01ee\u01ef\5F$\2\u01ef\u01f0\7U\2")
        buf.write("\2\u01f0\u01f3\5:\36\2\u01f1\u01f2\7\37\2\2\u01f2\u01f4")
        buf.write("\5:\36\2\u01f3\u01f1\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4")
        buf.write("\u01fc\3\2\2\2\u01f5\u01f6\7B\2\2\u01f6\u01f7\7T\2\2\u01f7")
        buf.write("\u01f8\5F$\2\u01f8\u01f9\7U\2\2\u01f9\u01fa\5:\36\2\u01fa")
        buf.write("\u01fc\3\2\2\2\u01fb\u01ec\3\2\2\2\u01fb\u01f5\3\2\2\2")
        buf.write("\u01fcE\3\2\2\2\u01fd\u0206\5\66\34\2\u01fe\u01ff\5V,")
        buf.write("\2\u01ff\u0203\5l\67\2\u0200\u0201\7d\2\2\u0201\u0204")
        buf.write("\5\u008eH\2\u0202\u0204\5\u0092J\2\u0203\u0200\3\2\2\2")
        buf.write("\u0203\u0202\3\2\2\2\u0204\u0206\3\2\2\2\u0205\u01fd\3")
        buf.write("\2\2\2\u0205\u01fe\3\2\2\2\u0206G\3\2\2\2\u0207\u0208")
        buf.write("\7S\2\2\u0208\u0209\7T\2\2\u0209\u020a\5F$\2\u020a\u020b")
        buf.write("\7U\2\2\u020b\u020c\5:\36\2\u020c\u0223\3\2\2\2\u020d")
        buf.write("\u020e\7\34\2\2\u020e\u020f\5:\36\2\u020f\u0210\7S\2\2")
        buf.write("\u0210\u0211\7T\2\2\u0211\u0212\5\66\34\2\u0212\u0213")
        buf.write("\7U\2\2\u0213\u0214\7\177\2\2\u0214\u0223\3\2\2\2\u0215")
        buf.write("\u0216\7\'\2\2\u0216\u0217\7T\2\2\u0217\u0219\5J&\2\u0218")
        buf.write("\u021a\5F$\2\u0219\u0218\3\2\2\2\u0219\u021a\3\2\2\2\u021a")
        buf.write("\u021b\3\2\2\2\u021b\u021d\7\177\2\2\u021c\u021e\5\66")
        buf.write("\34\2\u021d\u021c\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u021f")
        buf.write("\3\2\2\2\u021f\u0220\7U\2\2\u0220\u0221\5:\36\2\u0221")
        buf.write("\u0223\3\2\2\2\u0222\u0207\3\2\2\2\u0222\u020d\3\2\2\2")
        buf.write("\u0222\u0215\3\2\2\2\u0223I\3\2\2\2\u0224\u0227\5> \2")
        buf.write("\u0225\u0227\5R*\2\u0226\u0224\3\2\2\2\u0226\u0225\3\2")
        buf.write("\2\2\u0227K\3\2\2\2\u0228\u0230\7\20\2\2\u0229\u0230\7")
        buf.write("\30\2\2\u022a\u022d\7:\2\2\u022b\u022e\5\66\34\2\u022c")
        buf.write("\u022e\5\u0092J\2\u022d\u022b\3\2\2\2\u022d\u022c\3\2")
        buf.write("\2\2\u022d\u022e\3\2\2\2\u022e\u0230\3\2\2\2\u022f\u0228")
        buf.write("\3\2\2\2\u022f\u0229\3\2\2\2\u022f\u022a\3\2\2\2\u0230")
        buf.write("\u0231\3\2\2\2\u0231\u0232\7\177\2\2\u0232M\3\2\2\2\u0233")
        buf.write("\u0235\5P)\2\u0234\u0233\3\2\2\2\u0235\u0236\3\2\2\2\u0236")
        buf.write("\u0234\3\2\2\2\u0236\u0237\3\2\2\2\u0237O\3\2\2\2\u0238")
        buf.write("\u023e\5R*\2\u0239\u023e\5\u0086D\2\u023a\u023e\5\u00b4")
        buf.write("[\2\u023b\u023e\5\u00c6d\2\u023c\u023e\7\177\2\2\u023d")
        buf.write("\u0238\3\2\2\2\u023d\u0239\3\2\2\2\u023d\u023a\3\2\2\2")
        buf.write("\u023d\u023b\3\2\2\2\u023d\u023c\3\2\2\2\u023eQ\3\2\2")
        buf.write("\2\u023f\u0241\5V,\2\u0240\u023f\3\2\2\2\u0240\u0241\3")
        buf.write("\2\2\2\u0241\u0243\3\2\2\2\u0242\u0244\5h\65\2\u0243\u0242")
        buf.write("\3\2\2\2\u0243\u0244\3\2\2\2\u0244\u0245\3\2\2\2\u0245")
        buf.write("\u0246\7\177\2\2\u0246S\3\2\2\2\u0247\u024a\5Z.\2\u0248")
        buf.write("\u024a\7I\2\2\u0249\u0247\3\2\2\2\u0249\u0248\3\2\2\2")
        buf.write("\u024aU\3\2\2\2\u024b\u024d\5T+\2\u024c\u024b\3\2\2\2")
        buf.write("\u024d\u024e\3\2\2\2\u024e\u024f\3\2\2\2\u024e\u024c\3")
        buf.write("\2\2\2\u024fW\3\2\2\2\u0250\u0251\7\u0083\2\2\u0251Y\3")
        buf.write("\2\2\2\u0252\u0255\5\\/\2\u0253\u0255\5\u0096L\2\u0254")
        buf.write("\u0252\3\2\2\2\u0254\u0253\3\2\2\2\u0255[\3\2\2\2\u0256")
        buf.write("\u0259\5d\63\2\u0257\u0259\5x=\2\u0258\u0256\3\2\2\2\u0258")
        buf.write("\u0257\3\2\2\2\u0259]\3\2\2\2\u025a\u025c\5Z.\2\u025b")
        buf.write("\u025a\3\2\2\2\u025c\u025d\3\2\2\2\u025d\u025b\3\2\2\2")
        buf.write("\u025d\u025e\3\2\2\2\u025e_\3\2\2\2\u025f\u0260\t\13\2")
        buf.write("\2\u0260a\3\2\2\2\u0261\u0262\t\f\2\2\u0262c\3\2\2\2\u0263")
        buf.write("\u0284\5f\64\2\u0264\u0284\5b\62\2\u0265\u0267\5b\62\2")
        buf.write("\u0266\u0265\3\2\2\2\u0266\u0267\3\2\2\2\u0267\u0269\3")
        buf.write("\2\2\2\u0268\u026a\5`\61\2\u0269\u0268\3\2\2\2\u026a\u026b")
        buf.write("\3\2\2\2\u026b\u0269\3\2\2\2\u026b\u026c\3\2\2\2\u026c")
        buf.write("\u0284\3\2\2\2\u026d\u026f\5b\62\2\u026e\u026d\3\2\2\2")
        buf.write("\u026e\u026f\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0284\7")
        buf.write("\23\2\2\u0271\u0284\7\17\2\2\u0272\u0274\5b\62\2\u0273")
        buf.write("\u0272\3\2\2\2\u0273\u0274\3\2\2\2\u0274\u0278\3\2\2\2")
        buf.write("\u0275\u0277\5`\61\2\u0276\u0275\3\2\2\2\u0277\u027a\3")
        buf.write("\2\2\2\u0278\u0276\3\2\2\2\u0278\u0279\3\2\2\2\u0279\u027b")
        buf.write("\3\2\2\2\u027a\u0278\3\2\2\2\u027b\u0284\7,\2\2\u027c")
        buf.write("\u0284\7&\2\2\u027d\u027f\5`\61\2\u027e\u027d\3\2\2\2")
        buf.write("\u027e\u027f\3\2\2\2\u027f\u0280\3\2\2\2\u0280\u0284\7")
        buf.write("\35\2\2\u0281\u0284\7P\2\2\u0282\u0284\7\16\2\2\u0283")
        buf.write("\u0263\3\2\2\2\u0283\u0264\3\2\2\2\u0283\u0266\3\2\2\2")
        buf.write("\u0283\u026e\3\2\2\2\u0283\u0271\3\2\2\2\u0283\u0273\3")
        buf.write("\2\2\2\u0283\u027c\3\2\2\2\u0283\u027e\3\2\2\2\u0283\u0281")
        buf.write("\3\2\2\2\u0283\u0282\3\2\2\2\u0284e\3\2\2\2\u0285\u0289")
        buf.write("\5\u0094K\2\u0286\u0289\5X-\2\u0287\u0289\5\u00bc_\2\u0288")
        buf.write("\u0285\3\2\2\2\u0288\u0286\3\2\2\2\u0288\u0287\3\2\2\2")
        buf.write("\u0289g\3\2\2\2\u028a\u028f\5j\66\2\u028b\u028c\7y\2\2")
        buf.write("\u028c\u028e\5j\66\2\u028d\u028b\3\2\2\2\u028e\u0291\3")
        buf.write("\2\2\2\u028f\u028d\3\2\2\2\u028f\u0290\3\2\2\2\u0290i")
        buf.write("\3\2\2\2\u0291\u028f\3\2\2\2\u0292\u0294\5l\67\2\u0293")
        buf.write("\u0295\5\u008aF\2\u0294\u0293\3\2\2\2\u0294\u0295\3\2")
        buf.write("\2\2\u0295k\3\2\2\2\u0296\u0297\5n8\2\u0297m\3\2\2\2\u0298")
        buf.write("\u029a\5t;\2\u0299\u029b\7\25\2\2\u029a\u0299\3\2\2\2")
        buf.write("\u029a\u029b\3\2\2\2\u029b\u029d\3\2\2\2\u029c\u0298\3")
        buf.write("\2\2\2\u029d\u02a0\3\2\2\2\u029e\u029c\3\2\2\2\u029e\u029f")
        buf.write("\3\2\2\2\u029f\u02a1\3\2\2\2\u02a0\u029e\3\2\2\2\u02a1")
        buf.write("\u02a2\5p9\2\u02a2o\3\2\2\2\u02a3\u02a4\b9\1\2\u02a4\u02aa")
        buf.write("\5|?\2\u02a5\u02a6\7T\2\2\u02a6\u02a7\5n8\2\u02a7\u02a8")
        buf.write("\7U\2\2\u02a8\u02aa\3\2\2\2\u02a9\u02a3\3\2\2\2\u02a9")
        buf.write("\u02a5\3\2\2\2\u02aa\u02b6\3\2\2\2\u02ab\u02b2\f\4\2\2")
        buf.write("\u02ac\u02b3\5r:\2\u02ad\u02af\7V\2\2\u02ae\u02b0\58\35")
        buf.write("\2\u02af\u02ae\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b1")
        buf.write("\3\2\2\2\u02b1\u02b3\7W\2\2\u02b2\u02ac\3\2\2\2\u02b2")
        buf.write("\u02ad\3\2\2\2\u02b3\u02b5\3\2\2\2\u02b4\u02ab\3\2\2\2")
        buf.write("\u02b5\u02b8\3\2\2\2\u02b6\u02b4\3\2\2\2\u02b6\u02b7\3")
        buf.write("\2\2\2\u02b7q\3\2\2\2\u02b8\u02b6\3\2\2\2\u02b9\u02bb")
        buf.write("\7T\2\2\u02ba\u02bc\5\u0080A\2\u02bb\u02ba\3\2\2\2\u02bb")
        buf.write("\u02bc\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd\u02bf\7U\2\2")
        buf.write("\u02be\u02c0\5v<\2\u02bf\u02be\3\2\2\2\u02bf\u02c0\3\2")
        buf.write("\2\2\u02c0\u02c2\3\2\2\2\u02c1\u02c3\5z>\2\u02c2\u02c1")
        buf.write("\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3s\3\2\2\2\u02c4\u02ca")
        buf.write("\t\r\2\2\u02c5\u02c7\7\\\2\2\u02c6\u02c8\5v<\2\u02c7\u02c6")
        buf.write("\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02ca\3\2\2\2\u02c9")
        buf.write("\u02c4\3\2\2\2\u02c9\u02c5\3\2\2\2\u02cau\3\2\2\2\u02cb")
        buf.write("\u02cd\5x=\2\u02cc\u02cb\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce")
        buf.write("\u02cc\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cfw\3\2\2\2\u02d0")
        buf.write("\u02d1\t\16\2\2\u02d1y\3\2\2\2\u02d2\u02d3\t\r\2\2\u02d3")
        buf.write("{\3\2\2\2\u02d4\u02d6\7\u0082\2\2\u02d5\u02d4\3\2\2\2")
        buf.write("\u02d5\u02d6\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02d8\5")
        buf.write("\6\4\2\u02d8}\3\2\2\2\u02d9\u02da\5^\60\2\u02da\177\3")
        buf.write("\2\2\2\u02db\u02e0\5\u0082B\2\u02dc\u02de\7y\2\2\u02dd")
        buf.write("\u02dc\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\u02df\3\2\2\2")
        buf.write("\u02df\u02e1\7\u0082\2\2\u02e0\u02dd\3\2\2\2\u02e0\u02e1")
        buf.write("\3\2\2\2\u02e1\u0081\3\2\2\2\u02e2\u02e7\5\u0084C\2\u02e3")
        buf.write("\u02e4\7y\2\2\u02e4\u02e6\5\u0084C\2\u02e5\u02e3\3\2\2")
        buf.write("\2\u02e6\u02e9\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e7\u02e8")
        buf.write("\3\2\2\2\u02e8\u0083\3\2\2\2\u02e9\u02e7\3\2\2\2\u02ea")
        buf.write("\u02eb\5V,\2\u02eb\u02ee\5l\67\2\u02ec\u02ed\7d\2\2\u02ed")
        buf.write("\u02ef\5\u008eH\2\u02ee\u02ec\3\2\2\2\u02ee\u02ef\3\2")
        buf.write("\2\2\u02ef\u0085\3\2\2\2\u02f0\u02f2\5V,\2\u02f1\u02f0")
        buf.write("\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3")
        buf.write("\u02f4\5l\67\2\u02f4\u02f5\5\u0088E\2\u02f5\u0087\3\2")
        buf.write("\2\2\u02f6\u02fb\5@!\2\u02f7\u02f8\7d\2\2\u02f8\u02f9")
        buf.write("\t\17\2\2\u02f9\u02fb\7\177\2\2\u02fa\u02f6\3\2\2\2\u02fa")
        buf.write("\u02f7\3\2\2\2\u02fb\u0089\3\2\2\2\u02fc\u0302\5\u008c")
        buf.write("G\2\u02fd\u02fe\7T\2\2\u02fe\u02ff\5\u0090I\2\u02ff\u0300")
        buf.write("\7U\2\2\u0300\u0302\3\2\2\2\u0301\u02fc\3\2\2\2\u0301")
        buf.write("\u02fd\3\2\2\2\u0302\u008b\3\2\2\2\u0303\u0304\7d\2\2")
        buf.write("\u0304\u0307\5\u008eH\2\u0305\u0307\5\u0092J\2\u0306\u0303")
        buf.write("\3\2\2\2\u0306\u0305\3\2\2\2\u0307\u008d\3\2\2\2\u0308")
        buf.write("\u030b\5\62\32\2\u0309\u030b\5\u0092J\2\u030a\u0308\3")
        buf.write("\2\2\2\u030a\u0309\3\2\2\2\u030b\u008f\3\2\2\2\u030c\u030e")
        buf.write("\5\u008eH\2\u030d\u030f\7\u0082\2\2\u030e\u030d\3\2\2")
        buf.write("\2\u030e\u030f\3\2\2\2\u030f\u0317\3\2\2\2\u0310\u0311")
        buf.write("\7y\2\2\u0311\u0313\5\u008eH\2\u0312\u0314\7\u0082\2\2")
        buf.write("\u0313\u0312\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0316\3")
        buf.write("\2\2\2\u0315\u0310\3\2\2\2\u0316\u0319\3\2\2\2\u0317\u0315")
        buf.write("\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u0091\3\2\2\2\u0319")
        buf.write("\u0317\3\2\2\2\u031a\u031f\7X\2\2\u031b\u031d\5\u0090")
        buf.write("I\2\u031c\u031e\7y\2\2\u031d\u031c\3\2\2\2\u031d\u031e")
        buf.write("\3\2\2\2\u031e\u0320\3\2\2\2\u031f\u031b\3\2\2\2\u031f")
        buf.write("\u0320\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0322\7Y\2\2")
        buf.write("\u0322\u0093\3\2\2\2\u0323\u0327\7\u0083\2\2\u0324\u0327")
        buf.write("\5\u00bc_\2\u0325\u0327\5\u00ceh\2\u0326\u0323\3\2\2\2")
        buf.write("\u0326\u0324\3\2\2\2\u0326\u0325\3\2\2\2\u0327\u0095\3")
        buf.write("\2\2\2\u0328\u0329\5\u0098M\2\u0329\u032b\7X\2\2\u032a")
        buf.write("\u032c\5\u009eP\2\u032b\u032a\3\2\2\2\u032b\u032c\3\2")
        buf.write("\2\2\u032c\u032d\3\2\2\2\u032d\u032e\7Y\2\2\u032e\u0097")
        buf.write("\3\2\2\2\u032f\u0331\5\u009cO\2\u0330\u0332\5\u009aN\2")
        buf.write("\u0331\u0330\3\2\2\2\u0331\u0332\3\2\2\2\u0332\u0099\3")
        buf.write("\2\2\2\u0333\u0334\5\u0094K\2\u0334\u009b\3\2\2\2\u0335")
        buf.write("\u0336\t\20\2\2\u0336\u009d\3\2\2\2\u0337\u033c\5\u00a0")
        buf.write("Q\2\u0338\u0339\5\u00a8U\2\u0339\u033a\7}\2\2\u033a\u033c")
        buf.write("\3\2\2\2\u033b\u0337\3\2\2\2\u033b\u0338\3\2\2\2\u033c")
        buf.write("\u033d\3\2\2\2\u033d\u033b\3\2\2\2\u033d\u033e\3\2\2\2")
        buf.write("\u033e\u009f\3\2\2\2\u033f\u0341\5V,\2\u0340\u033f\3\2")
        buf.write("\2\2\u0340\u0341\3\2\2\2\u0341\u0343\3\2\2\2\u0342\u0344")
        buf.write("\5\u00a2R\2\u0343\u0342\3\2\2\2\u0343\u0344\3\2\2\2\u0344")
        buf.write("\u0345\3\2\2\2\u0345\u034a\7\177\2\2\u0346\u034a\5\u0086")
        buf.write("D\2\u0347\u034a\5\u00b4[\2\u0348\u034a\7\177\2\2\u0349")
        buf.write("\u0340\3\2\2\2\u0349\u0346\3\2\2\2\u0349\u0347\3\2\2\2")
        buf.write("\u0349\u0348\3\2\2\2\u034a\u00a1\3\2\2\2\u034b\u0350\5")
        buf.write("\u00a4S\2\u034c\u034d\7y\2\2\u034d\u034f\5\u00a4S\2\u034e")
        buf.write("\u034c\3\2\2\2\u034f\u0352\3\2\2\2\u0350\u034e\3\2\2\2")
        buf.write("\u0350\u0351\3\2\2\2\u0351\u00a3\3\2\2\2\u0352\u0350\3")
        buf.write("\2\2\2\u0353\u0355\5l\67\2\u0354\u0356\5\u008cG\2\u0355")
        buf.write("\u0354\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u035d\3\2\2\2")
        buf.write("\u0357\u0359\7\u0083\2\2\u0358\u0357\3\2\2\2\u0358\u0359")
        buf.write("\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035b\7}\2\2\u035b")
        buf.write("\u035d\58\35\2\u035c\u0353\3\2\2\2\u035c\u0358\3\2\2\2")
        buf.write("\u035d\u00a5\3\2\2\2\u035e\u0360\5\u0094K\2\u035f\u0361")
        buf.write("\7\u0082\2\2\u0360\u035f\3\2\2\2\u0360\u0361\3\2\2\2\u0361")
        buf.write("\u0369\3\2\2\2\u0362\u0363\7y\2\2\u0363\u0365\5\u0094")
        buf.write("K\2\u0364\u0366\7\u0082\2\2\u0365\u0364\3\2\2\2\u0365")
        buf.write("\u0366\3\2\2\2\u0366\u0368\3\2\2\2\u0367\u0362\3\2\2\2")
        buf.write("\u0368\u036b\3\2\2\2\u0369\u0367\3\2\2\2\u0369\u036a\3")
        buf.write("\2\2\2\u036a\u00a7\3\2\2\2\u036b\u0369\3\2\2\2\u036c\u036d")
        buf.write("\t\21\2\2\u036d\u00a9\3\2\2\2\u036e\u0370\5\u00acW\2\u036f")
        buf.write("\u0371\7\u0082\2\2\u0370\u036f\3\2\2\2\u0370\u0371\3\2")
        buf.write("\2\2\u0371\u0379\3\2\2\2\u0372\u0373\7y\2\2\u0373\u0375")
        buf.write("\5\u00acW\2\u0374\u0376\7\u0082\2\2\u0375\u0374\3\2\2")
        buf.write("\2\u0375\u0376\3\2\2\2\u0376\u0378\3\2\2\2\u0377\u0372")
        buf.write("\3\2\2\2\u0378\u037b\3\2\2\2\u0379\u0377\3\2\2\2\u0379")
        buf.write("\u037a\3\2\2\2\u037a\u00ab\3\2\2\2\u037b\u0379\3\2\2\2")
        buf.write("\u037c\u0383\5\u00aeX\2\u037d\u037f\7T\2\2\u037e\u0380")
        buf.write("\5\u0090I\2\u037f\u037e\3\2\2\2\u037f\u0380\3\2\2\2\u0380")
        buf.write("\u0381\3\2\2\2\u0381\u0384\7U\2\2\u0382\u0384\5\u0092")
        buf.write("J\2\u0383\u037d\3\2\2\2\u0383\u0382\3\2\2\2\u0384\u00ad")
        buf.write("\3\2\2\2\u0385\u0388\5\u0094K\2\u0386\u0388\7\u0083\2")
        buf.write("\2\u0387\u0385\3\2\2\2\u0387\u0386\3\2\2\2\u0388\u00af")
        buf.write("\3\2\2\2\u0389\u038a\7\63\2\2\u038a\u038b\5\u00c8e\2\u038b")
        buf.write("\u00b1\3\2\2\2\u038c\u038d\7\63\2\2\u038d\u038e\7\6\2")
        buf.write("\2\u038e\u038f\7\u0083\2\2\u038f\u00b3\3\2\2\2\u0390\u0391")
        buf.write("\7C\2\2\u0391\u0392\7e\2\2\u0392\u0393\5\u00b6\\\2\u0393")
        buf.write("\u0394\7f\2\2\u0394\u0395\5P)\2\u0395\u00b5\3\2\2\2\u0396")
        buf.write("\u039b\5\u00b8]\2\u0397\u0398\7y\2\2\u0398\u039a\5\u00b8")
        buf.write("]\2\u0399\u0397\3\2\2\2\u039a\u039d\3\2\2\2\u039b\u0399")
        buf.write("\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u00b7\3\2\2\2\u039d")
        buf.write("\u039b\3\2\2\2\u039e\u03a1\5\u00ba^\2\u039f\u03a1\5\u0084")
        buf.write("C\2\u03a0\u039e\3\2\2\2\u03a0\u039f\3\2\2\2\u03a1\u00b9")
        buf.write("\3\2\2\2\u03a2\u03a3\7C\2\2\u03a3\u03a4\7e\2\2\u03a4\u03a5")
        buf.write("\5\u00b6\\\2\u03a5\u03a6\7f\2\2\u03a6\u03a8\3\2\2\2\u03a7")
        buf.write("\u03a2\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03a9\3\2\2\2")
        buf.write("\u03a9\u03ac\7\24\2\2\u03aa\u03ac\7K\2\2\u03ab\u03a7\3")
        buf.write("\2\2\2\u03ab\u03aa\3\2\2\2\u03ac\u03b8\3\2\2\2\u03ad\u03af")
        buf.write("\7\u0082\2\2\u03ae\u03ad\3\2\2\2\u03ae\u03af\3\2\2\2\u03af")
        buf.write("\u03b1\3\2\2\2\u03b0\u03b2\7\u0083\2\2\u03b1\u03b0\3\2")
        buf.write("\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b9\3\2\2\2\u03b3\u03b5")
        buf.write("\7\u0083\2\2\u03b4\u03b3\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5")
        buf.write("\u03b6\3\2\2\2\u03b6\u03b7\7d\2\2\u03b7\u03b9\5~@\2\u03b8")
        buf.write("\u03ae\3\2\2\2\u03b8\u03b4\3\2\2\2\u03b9\u00bb\3\2\2\2")
        buf.write("\u03ba\u03bb\5\u00c0a\2\u03bb\u03bd\7e\2\2\u03bc\u03be")
        buf.write("\5\u00c2b\2\u03bd\u03bc\3\2\2\2\u03bd\u03be\3\2\2\2\u03be")
        buf.write("\u03bf\3\2\2\2\u03bf\u03c0\7f\2\2\u03c0\u00bd\3\2\2\2")
        buf.write("\u03c1\u03cd\5\u00bc_\2\u03c2\u03c5\5\u00b0Y\2\u03c3\u03c5")
        buf.write("\5\u00b2Z\2\u03c4\u03c2\3\2\2\2\u03c4\u03c3\3\2\2\2\u03c5")
        buf.write("\u03c6\3\2\2\2\u03c6\u03c8\7e\2\2\u03c7\u03c9\5\u00c2")
        buf.write("b\2\u03c8\u03c7\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03ca")
        buf.write("\3\2\2\2\u03ca\u03cb\7f\2\2\u03cb\u03cd\3\2\2\2\u03cc")
        buf.write("\u03c1\3\2\2\2\u03cc\u03c4\3\2\2\2\u03cd\u00bf\3\2\2\2")
        buf.write("\u03ce\u03cf\7\u0083\2\2\u03cf\u00c1\3\2\2\2\u03d0\u03d2")
        buf.write("\5\u00c4c\2\u03d1\u03d3\7\u0082\2\2\u03d2\u03d1\3\2\2")
        buf.write("\2\u03d2\u03d3\3\2\2\2\u03d3\u03db\3\2\2\2\u03d4\u03d5")
        buf.write("\7y\2\2\u03d5\u03d7\5\u00c4c\2\u03d6\u03d8\7\u0082\2\2")
        buf.write("\u03d7\u03d6\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03da\3")
        buf.write("\2\2\2\u03d9\u03d4\3\2\2\2\u03da\u03dd\3\2\2\2\u03db\u03d9")
        buf.write("\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u00c3\3\2\2\2\u03dd")
        buf.write("\u03db\3\2\2\2\u03de\u03e2\5~@\2\u03df\u03e2\58\35\2\u03e0")
        buf.write("\u03e2\5\6\4\2\u03e1\u03de\3\2\2\2\u03e1\u03df\3\2\2\2")
        buf.write("\u03e1\u03e0\3\2\2\2\u03e2\u00c5\3\2\2\2\u03e3\u03e4\7")
        buf.write("C\2\2\u03e4\u03e5\5P)\2\u03e5\u00c7\3\2\2\2\u03e6\u03e9")
        buf.write("\7\60\2\2\u03e7\u03e8\7V\2\2\u03e8\u03ea\7W\2\2\u03e9")
        buf.write("\u03e7\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u041a\3\2\2\2")
        buf.write("\u03eb\u03ee\7\33\2\2\u03ec\u03ed\7V\2\2\u03ed\u03ef\7")
        buf.write("W\2\2\u03ee\u03ec\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u041a")
        buf.write("\3\2\2\2\u03f0\u041a\7Z\2\2\u03f1\u041a\7[\2\2\u03f2\u041a")
        buf.write("\7\\\2\2\u03f3\u041a\7]\2\2\u03f4\u041a\7^\2\2\u03f5\u041a")
        buf.write("\7_\2\2\u03f6\u041a\7`\2\2\u03f7\u041a\7a\2\2\u03f8\u041a")
        buf.write("\7b\2\2\u03f9\u041a\7c\2\2\u03fa\u041a\7d\2\2\u03fb\u041a")
        buf.write("\7f\2\2\u03fc\u041a\7e\2\2\u03fd\u041a\7t\2\2\u03fe\u041a")
        buf.write("\7g\2\2\u03ff\u041a\7h\2\2\u0400\u041a\7i\2\2\u0401\u041a")
        buf.write("\7k\2\2\u0402\u041a\7l\2\2\u0403\u041a\7m\2\2\u0404\u041a")
        buf.write("\7n\2\2\u0405\u0406\7e\2\2\u0406\u041a\7e\2\2\u0407\u0408")
        buf.write("\7f\2\2\u0408\u041a\7f\2\2\u0409\u041a\7p\2\2\u040a\u041a")
        buf.write("\7o\2\2\u040b\u041a\7q\2\2\u040c\u041a\7r\2\2\u040d\u041a")
        buf.write("\7s\2\2\u040e\u041a\7u\2\2\u040f\u041a\7v\2\2\u0410\u041a")
        buf.write("\7w\2\2\u0411\u041a\7x\2\2\u0412\u041a\7y\2\2\u0413\u041a")
        buf.write("\7z\2\2\u0414\u041a\7{\2\2\u0415\u0416\7T\2\2\u0416\u041a")
        buf.write("\7U\2\2\u0417\u0418\7V\2\2\u0418\u041a\7W\2\2\u0419\u03e6")
        buf.write("\3\2\2\2\u0419\u03eb\3\2\2\2\u0419\u03f0\3\2\2\2\u0419")
        buf.write("\u03f1\3\2\2\2\u0419\u03f2\3\2\2\2\u0419\u03f3\3\2\2\2")
        buf.write("\u0419\u03f4\3\2\2\2\u0419\u03f5\3\2\2\2\u0419\u03f6\3")
        buf.write("\2\2\2\u0419\u03f7\3\2\2\2\u0419\u03f8\3\2\2\2\u0419\u03f9")
        buf.write("\3\2\2\2\u0419\u03fa\3\2\2\2\u0419\u03fb\3\2\2\2\u0419")
        buf.write("\u03fc\3\2\2\2\u0419\u03fd\3\2\2\2\u0419\u03fe\3\2\2\2")
        buf.write("\u0419\u03ff\3\2\2\2\u0419\u0400\3\2\2\2\u0419\u0401\3")
        buf.write("\2\2\2\u0419\u0402\3\2\2\2\u0419\u0403\3\2\2\2\u0419\u0404")
        buf.write("\3\2\2\2\u0419\u0405\3\2\2\2\u0419\u0407\3\2\2\2\u0419")
        buf.write("\u0409\3\2\2\2\u0419\u040a\3\2\2\2\u0419\u040b\3\2\2\2")
        buf.write("\u0419\u040c\3\2\2\2\u0419\u040d\3\2\2\2\u0419\u040e\3")
        buf.write("\2\2\2\u0419\u040f\3\2\2\2\u0419\u0410\3\2\2\2\u0419\u0411")
        buf.write("\3\2\2\2\u0419\u0412\3\2\2\2\u0419\u0413\3\2\2\2\u0419")
        buf.write("\u0414\3\2\2\2\u0419\u0415\3\2\2\2\u0419\u0417\3\2\2\2")
        buf.write("\u041a\u00c9\3\2\2\2\u041b\u041c\t\22\2\2\u041c\u00cb")
        buf.write("\3\2\2\2\u041d\u041e\t\23\2\2\u041e\u00cd\3\2\2\2\u041f")
        buf.write("\u0420\t\24\2\2\u0420\u00cf\3\2\2\2\u008d\u00d1\u00d8")
        buf.write("\u00df\u00e6\u00ed\u00f1\u00f3\u00f9\u0100\u0106\u010b")
        buf.write("\u010d\u0115\u011a\u011f\u0127\u012b\u012f\u0132\u0140")
        buf.write("\u0144\u0149\u0153\u015a\u0162\u016a\u0173\u017a\u0181")
        buf.write("\u0189\u0191\u0199\u01a1\u01a9\u01b1\u01ba\u01c3\u01cf")
        buf.write("\u01d1\u01d7\u01dd\u01e3\u01ea\u01f3\u01fb\u0203\u0205")
        buf.write("\u0219\u021d\u0222\u0226\u022d\u022f\u0236\u023d\u0240")
        buf.write("\u0243\u0249\u024e\u0254\u0258\u025d\u0266\u026b\u026e")
        buf.write("\u0273\u0278\u027e\u0283\u0288\u028f\u0294\u029a\u029e")
        buf.write("\u02a9\u02af\u02b2\u02b6\u02bb\u02bf\u02c2\u02c7\u02c9")
        buf.write("\u02ce\u02d5\u02dd\u02e0\u02e7\u02ee\u02f1\u02fa\u0301")
        buf.write("\u0306\u030a\u030e\u0313\u0317\u031d\u031f\u0326\u032b")
        buf.write("\u0331\u033b\u033d\u0340\u0343\u0349\u0350\u0355\u0358")
        buf.write("\u035c\u0360\u0365\u0369\u0370\u0375\u0379\u037f\u0383")
        buf.write("\u0387\u039b\u03a0\u03a7\u03ab\u03ae\u03b1\u03b4\u03b8")
        buf.write("\u03bd\u03c4\u03c8\u03cc\u03d2\u03d7\u03db\u03e1\u03e9")
        buf.write("\u03ee\u0419")
        return buf.getvalue()


class myParser ( Parser ):

    grammarFileName = "myParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'alignas'", "'alignof'", "'asm'", "'auto'", 
                     "'bool'", "'break'", "'case'", "'catch'", "'char'", 
                     "'class'", "'const'", "'constexpr'", "'const_cast'", 
                     "'continue'", "'decltype'", "'default'", "'delete'", 
                     "'do'", "'double'", "'dynamic_cast'", "'else'", "'enum'", 
                     "'explicit'", "'export'", "'extern'", "'false'", "'final'", 
                     "'float'", "'for'", "'friend'", "'goto'", "'if'", "'inline'", 
                     "'int'", "'long'", "'mutable'", "'namespace'", "'new'", 
                     "'noexcept'", "'nullptr'", "'operator'", "'override'", 
                     "'private'", "'protected'", "'public'", "'register'", 
                     "'reinterpret_cast'", "'return'", "'short'", "'signed'", 
                     "'sizeof'", "'static'", "'static_assert'", "'static_cast'", 
                     "'struct'", "'switch'", "'template'", "'this'", "'thread_local'", 
                     "'throw'", "'true'", "'try'", "'typedef'", "'typeid'", 
                     "'typename'", "'union'", "'unsigned'", "'using'", "'virtual'", 
                     "'void'", "'volatile'", "'wchar_t'", "'while'", "'('", 
                     "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'^'", "'&'", "'|'", "'~'", "<INVALID>", 
                     "'='", "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", 
                     "'%='", "'^='", "'&='", "'|='", "'<<='", "'>>='", "'=='", 
                     "'!='", "'<='", "'>='", "<INVALID>", "<INVALID>", "'++'", 
                     "'--'", "','", "'->*'", "'->'", "'?'", "':'", "'::'", 
                     "';'", "'.'", "'.*'", "'...'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'stack'", "'push'", 
                     "'empty'", "'pop'", "'top'", "'cin'", "'cout'", "'endl'", 
                     "'string'", "'length'", "'vector'", "'find'", "'push_back'" ]

    symbolicNames = [ "<INVALID>", "IntegerLiteral", "CharacterLiteral", 
                      "FloatingLiteral", "StringLiteral", "BooleanLiteral", 
                      "PointerLiteral", "MultiLineMacro", "Directive", "Alignas", 
                      "Alignof", "Asm", "Auto", "Bool", "Break", "Case", 
                      "Catch", "Char", "Class", "Const", "Constexpr", "Const_cast", 
                      "Continue", "Decltype", "Default", "Delete", "Do", 
                      "Double", "Dynamic_cast", "Else", "Enum", "Explicit", 
                      "Export", "Extern", "False_", "Final", "Float", "For", 
                      "Friend", "Goto", "If", "Inline", "Int", "Long", "Mutable", 
                      "Namespace", "New", "Noexcept", "Nullptr", "Operator", 
                      "Override", "Private", "Protected", "Public", "Register", 
                      "Reinterpret_cast", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Static_assert", "Static_cast", "Struct", 
                      "Switch", "Template", "This", "Thread_local", "Throw", 
                      "True_", "Try", "Typedef", "Typeid_", "Typename_", 
                      "Union", "Unsigned", "Using", "Virtual", "Void", "Volatile", 
                      "Wchar", "While", "LeftParen", "RightParen", "LeftBracket", 
                      "RightBracket", "LeftBrace", "RightBrace", "Plus", 
                      "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", 
                      "Tilde", "Not", "Assign", "Less", "Greater", "PlusAssign", 
                      "MinusAssign", "StarAssign", "DivAssign", "ModAssign", 
                      "XorAssign", "AndAssign", "OrAssign", "LeftShiftAssign", 
                      "RightShiftAssign", "Equal", "NotEqual", "LessEqual", 
                      "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
                      "Comma", "ArrowStar", "Arrow", "Question", "Colon", 
                      "Doublecolon", "Semi", "Dot", "DotStar", "Ellipsis", 
                      "Identifier", "DecimalLiteral", "OctalLiteral", "HexadecimalLiteral", 
                      "BinaryLiteral", "Whitespace", "Newline", "BlockComment", 
                      "LineComment", "Stack", "Push", "Empty", "Pop", "Top", 
                      "Cin", "Cout", "Endl", "String", "Length", "Vector", 
                      "Find", "Push_back" ]

    RULE_translationUnit = 0
    RULE_primaryExpression = 1
    RULE_idExpression = 2
    RULE_postfixExpression = 3
    RULE_unaryExpression = 4
    RULE_unaryOperator = 5
    RULE_newExpression = 6
    RULE_newTypeId = 7
    RULE_newDeclarator = 8
    RULE_noPointerNewDeclarator = 9
    RULE_deleteExpression = 10
    RULE_castExpression = 11
    RULE_pointerMemberExpression = 12
    RULE_multiplicativeExpression = 13
    RULE_additiveExpression = 14
    RULE_shiftExpression = 15
    RULE_shiftOperator = 16
    RULE_relationalExpression = 17
    RULE_equalityExpression = 18
    RULE_andExpression = 19
    RULE_exclusiveOrExpression = 20
    RULE_inclusiveOrExpression = 21
    RULE_logicalAndExpression = 22
    RULE_logicalOrExpression = 23
    RULE_conditionalExpression = 24
    RULE_assignmentOperator = 25
    RULE_expression = 26
    RULE_constantExpression = 27
    RULE_statement = 28
    RULE_labeledStatement = 29
    RULE_expressionStatement = 30
    RULE_compoundStatement = 31
    RULE_statementSeq = 32
    RULE_selectionStatement = 33
    RULE_condition = 34
    RULE_iterationStatement = 35
    RULE_forInitStatement = 36
    RULE_jumpStatement = 37
    RULE_declarationseq = 38
    RULE_declaration = 39
    RULE_simpleDeclaration = 40
    RULE_declSpecifier = 41
    RULE_declSpecifierSeq = 42
    RULE_typedefName = 43
    RULE_typeSpecifier = 44
    RULE_trailingTypeSpecifier = 45
    RULE_typeSpecifierSeq = 46
    RULE_simpleTypeLengthModifier = 47
    RULE_simpleTypeSignednessModifier = 48
    RULE_simpleTypeSpecifier = 49
    RULE_theTypeName = 50
    RULE_initDeclaratorList = 51
    RULE_initDeclarator = 52
    RULE_declarator = 53
    RULE_pointerDeclarator = 54
    RULE_noPointerDeclarator = 55
    RULE_parametersAndQualifiers = 56
    RULE_pointerOperator = 57
    RULE_cvqualifierseq = 58
    RULE_cvQualifier = 59
    RULE_refqualifier = 60
    RULE_declaratorid = 61
    RULE_theTypeId = 62
    RULE_parameterDeclarationClause = 63
    RULE_parameterDeclarationList = 64
    RULE_parameterDeclaration = 65
    RULE_functionDefinition = 66
    RULE_functionBody = 67
    RULE_initializer = 68
    RULE_braceOrEqualInitializer = 69
    RULE_initializerClause = 70
    RULE_initializerList = 71
    RULE_bracedInitList = 72
    RULE_className = 73
    RULE_classSpecifier = 74
    RULE_classHead = 75
    RULE_classHeadName = 76
    RULE_classKey = 77
    RULE_memberSpecification = 78
    RULE_memberdeclaration = 79
    RULE_memberDeclaratorList = 80
    RULE_memberDeclarator = 81
    RULE_baseSpecifierList = 82
    RULE_accessSpecifier = 83
    RULE_memInitializerList = 84
    RULE_memInitializer = 85
    RULE_meminitializerid = 86
    RULE_operatorFunctionId = 87
    RULE_literalOperatorId = 88
    RULE_templateDeclaration = 89
    RULE_templateparameterList = 90
    RULE_templateParameter = 91
    RULE_typeParameter = 92
    RULE_simpleTemplateId = 93
    RULE_templateId = 94
    RULE_templateName = 95
    RULE_templateArgumentList = 96
    RULE_templateArgument = 97
    RULE_explicitInstantiation = 98
    RULE_theOperator = 99
    RULE_literal = 100
    RULE_myId = 101
    RULE_myClass = 102

    ruleNames =  [ "translationUnit", "primaryExpression", "idExpression", 
                   "postfixExpression", "unaryExpression", "unaryOperator", 
                   "newExpression", "newTypeId", "newDeclarator", "noPointerNewDeclarator", 
                   "deleteExpression", "castExpression", "pointerMemberExpression", 
                   "multiplicativeExpression", "additiveExpression", "shiftExpression", 
                   "shiftOperator", "relationalExpression", "equalityExpression", 
                   "andExpression", "exclusiveOrExpression", "inclusiveOrExpression", 
                   "logicalAndExpression", "logicalOrExpression", "conditionalExpression", 
                   "assignmentOperator", "expression", "constantExpression", 
                   "statement", "labeledStatement", "expressionStatement", 
                   "compoundStatement", "statementSeq", "selectionStatement", 
                   "condition", "iterationStatement", "forInitStatement", 
                   "jumpStatement", "declarationseq", "declaration", "simpleDeclaration", 
                   "declSpecifier", "declSpecifierSeq", "typedefName", "typeSpecifier", 
                   "trailingTypeSpecifier", "typeSpecifierSeq", "simpleTypeLengthModifier", 
                   "simpleTypeSignednessModifier", "simpleTypeSpecifier", 
                   "theTypeName", "initDeclaratorList", "initDeclarator", 
                   "declarator", "pointerDeclarator", "noPointerDeclarator", 
                   "parametersAndQualifiers", "pointerOperator", "cvqualifierseq", 
                   "cvQualifier", "refqualifier", "declaratorid", "theTypeId", 
                   "parameterDeclarationClause", "parameterDeclarationList", 
                   "parameterDeclaration", "functionDefinition", "functionBody", 
                   "initializer", "braceOrEqualInitializer", "initializerClause", 
                   "initializerList", "bracedInitList", "className", "classSpecifier", 
                   "classHead", "classHeadName", "classKey", "memberSpecification", 
                   "memberdeclaration", "memberDeclaratorList", "memberDeclarator", 
                   "baseSpecifierList", "accessSpecifier", "memInitializerList", 
                   "memInitializer", "meminitializerid", "operatorFunctionId", 
                   "literalOperatorId", "templateDeclaration", "templateparameterList", 
                   "templateParameter", "typeParameter", "simpleTemplateId", 
                   "templateId", "templateName", "templateArgumentList", 
                   "templateArgument", "explicitInstantiation", "theOperator", 
                   "literal", "myId", "myClass" ]

    EOF = Token.EOF
    IntegerLiteral=1
    CharacterLiteral=2
    FloatingLiteral=3
    StringLiteral=4
    BooleanLiteral=5
    PointerLiteral=6
    MultiLineMacro=7
    Directive=8
    Alignas=9
    Alignof=10
    Asm=11
    Auto=12
    Bool=13
    Break=14
    Case=15
    Catch=16
    Char=17
    Class=18
    Const=19
    Constexpr=20
    Const_cast=21
    Continue=22
    Decltype=23
    Default=24
    Delete=25
    Do=26
    Double=27
    Dynamic_cast=28
    Else=29
    Enum=30
    Explicit=31
    Export=32
    Extern=33
    False_=34
    Final=35
    Float=36
    For=37
    Friend=38
    Goto=39
    If=40
    Inline=41
    Int=42
    Long=43
    Mutable=44
    Namespace=45
    New=46
    Noexcept=47
    Nullptr=48
    Operator=49
    Override=50
    Private=51
    Protected=52
    Public=53
    Register=54
    Reinterpret_cast=55
    Return=56
    Short=57
    Signed=58
    Sizeof=59
    Static=60
    Static_assert=61
    Static_cast=62
    Struct=63
    Switch=64
    Template=65
    This=66
    Thread_local=67
    Throw=68
    True_=69
    Try=70
    Typedef=71
    Typeid_=72
    Typename_=73
    Union=74
    Unsigned=75
    Using=76
    Virtual=77
    Void=78
    Volatile=79
    Wchar=80
    While=81
    LeftParen=82
    RightParen=83
    LeftBracket=84
    RightBracket=85
    LeftBrace=86
    RightBrace=87
    Plus=88
    Minus=89
    Star=90
    Div=91
    Mod=92
    Caret=93
    And=94
    Or=95
    Tilde=96
    Not=97
    Assign=98
    Less=99
    Greater=100
    PlusAssign=101
    MinusAssign=102
    StarAssign=103
    DivAssign=104
    ModAssign=105
    XorAssign=106
    AndAssign=107
    OrAssign=108
    LeftShiftAssign=109
    RightShiftAssign=110
    Equal=111
    NotEqual=112
    LessEqual=113
    GreaterEqual=114
    AndAnd=115
    OrOr=116
    PlusPlus=117
    MinusMinus=118
    Comma=119
    ArrowStar=120
    Arrow=121
    Question=122
    Colon=123
    Doublecolon=124
    Semi=125
    Dot=126
    DotStar=127
    Ellipsis=128
    Identifier=129
    DecimalLiteral=130
    OctalLiteral=131
    HexadecimalLiteral=132
    BinaryLiteral=133
    Whitespace=134
    Newline=135
    BlockComment=136
    LineComment=137
    Stack=138
    Push=139
    Empty=140
    Pop=141
    Top=142
    Cin=143
    Cout=144
    Endl=145
    String=146
    Length=147
    Vector=148
    Find=149
    Push_back=150

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class TranslationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(myParser.EOF, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(myParser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return myParser.RULE_translationUnit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTranslationUnit" ):
                return visitor.visitTranslationUnit(self)
            else:
                return visitor.visitChildren(self)




    def translationUnit(self):

        localctx = myParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Char) | (1 << myParser.Class) | (1 << myParser.Const) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.Operator) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Struct))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (myParser.Template - 65)) | (1 << (myParser.Typedef - 65)) | (1 << (myParser.Unsigned - 65)) | (1 << (myParser.Void - 65)) | (1 << (myParser.Volatile - 65)) | (1 << (myParser.LeftParen - 65)) | (1 << (myParser.Star - 65)) | (1 << (myParser.And - 65)) | (1 << (myParser.AndAnd - 65)) | (1 << (myParser.Semi - 65)) | (1 << (myParser.Ellipsis - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (myParser.Identifier - 129)) | (1 << (myParser.Stack - 129)) | (1 << (myParser.Push - 129)) | (1 << (myParser.Empty - 129)) | (1 << (myParser.Pop - 129)) | (1 << (myParser.Top - 129)) | (1 << (myParser.Cin - 129)) | (1 << (myParser.Cout - 129)) | (1 << (myParser.String - 129)) | (1 << (myParser.Length - 129)) | (1 << (myParser.Vector - 129)) | (1 << (myParser.Find - 129)) | (1 << (myParser.Push_back - 129)))) != 0):
                self.state = 206
                self.declarationseq()


            self.state = 209
            self.match(myParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.LiteralContext)
            else:
                return self.getTypedRuleContext(myParser.LiteralContext,i)


        def LeftParen(self):
            return self.getToken(myParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(myParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(myParser.RightParen, 0)

        def idExpression(self):
            return self.getTypedRuleContext(myParser.IdExpressionContext,0)


        def getRuleIndex(self):
            return myParser.RULE_primaryExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = myParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_primaryExpression)
        try:
            self.state = 221
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.IntegerLiteral, myParser.CharacterLiteral, myParser.FloatingLiteral, myParser.StringLiteral, myParser.BooleanLiteral, myParser.PointerLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 212 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 211
                        self.literal()

                    else:
                        raise NoViableAltException(self)
                    self.state = 214 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

                pass
            elif token in [myParser.LeftParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 216
                self.match(myParser.LeftParen)
                self.state = 217
                self.expression()
                self.state = 218
                self.match(myParser.RightParen)
                pass
            elif token in [myParser.Operator, myParser.Identifier, myParser.Push, myParser.Empty, myParser.Pop, myParser.Top, myParser.Cin, myParser.Cout, myParser.Length, myParser.Find, myParser.Push_back]:
                self.enterOuterAlt(localctx, 3)
                self.state = 220
                self.idExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(myParser.Identifier, 0)

        def operatorFunctionId(self):
            return self.getTypedRuleContext(myParser.OperatorFunctionIdContext,0)


        def literalOperatorId(self):
            return self.getTypedRuleContext(myParser.LiteralOperatorIdContext,0)


        def templateId(self):
            return self.getTypedRuleContext(myParser.TemplateIdContext,0)


        def myId(self):
            return self.getTypedRuleContext(myParser.MyIdContext,0)


        def getRuleIndex(self):
            return myParser.RULE_idExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdExpression" ):
                return visitor.visitIdExpression(self)
            else:
                return visitor.visitChildren(self)




    def idExpression(self):

        localctx = myParser.IdExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_idExpression)
        try:
            self.state = 228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 223
                self.match(myParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 224
                self.operatorFunctionId()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 225
                self.literalOperatorId()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 226
                self.templateId()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 227
                self.myId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(myParser.PrimaryExpressionContext,0)


        def simpleTypeSpecifier(self):
            return self.getTypedRuleContext(myParser.SimpleTypeSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(myParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(myParser.RightParen, 0)

        def bracedInitList(self):
            return self.getTypedRuleContext(myParser.BracedInitListContext,0)


        def initializerList(self):
            return self.getTypedRuleContext(myParser.InitializerListContext,0)


        def postfixExpression(self):
            return self.getTypedRuleContext(myParser.PostfixExpressionContext,0)


        def LeftBracket(self):
            return self.getToken(myParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(myParser.RightBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(myParser.ExpressionContext,0)


        def Dot(self):
            return self.getToken(myParser.Dot, 0)

        def Arrow(self):
            return self.getToken(myParser.Arrow, 0)

        def idExpression(self):
            return self.getTypedRuleContext(myParser.IdExpressionContext,0)


        def Template(self):
            return self.getToken(myParser.Template, 0)

        def PlusPlus(self):
            return self.getToken(myParser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(myParser.MinusMinus, 0)

        def getRuleIndex(self):
            return myParser.RULE_postfixExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)



    def postfixExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = myParser.PostfixExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 6
        self.enterRecursionRule(localctx, 6, self.RULE_postfixExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 231
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 232
                self.simpleTypeSpecifier()
                self.state = 239
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [myParser.LeftParen]:
                    self.state = 233
                    self.match(myParser.LeftParen)
                    self.state = 235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.IntegerLiteral) | (1 << myParser.CharacterLiteral) | (1 << myParser.FloatingLiteral) | (1 << myParser.StringLiteral) | (1 << myParser.BooleanLiteral) | (1 << myParser.PointerLiteral) | (1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Char) | (1 << myParser.Delete) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.New) | (1 << myParser.Operator) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Sizeof))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (myParser.Unsigned - 75)) | (1 << (myParser.Void - 75)) | (1 << (myParser.LeftParen - 75)) | (1 << (myParser.LeftBrace - 75)) | (1 << (myParser.Plus - 75)) | (1 << (myParser.Minus - 75)) | (1 << (myParser.Star - 75)) | (1 << (myParser.And - 75)) | (1 << (myParser.Or - 75)) | (1 << (myParser.Tilde - 75)) | (1 << (myParser.Not - 75)) | (1 << (myParser.PlusPlus - 75)) | (1 << (myParser.MinusMinus - 75)) | (1 << (myParser.Doublecolon - 75)) | (1 << (myParser.Identifier - 75)) | (1 << (myParser.Stack - 75)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (myParser.Push - 139)) | (1 << (myParser.Empty - 139)) | (1 << (myParser.Pop - 139)) | (1 << (myParser.Top - 139)) | (1 << (myParser.Cin - 139)) | (1 << (myParser.Cout - 139)) | (1 << (myParser.String - 139)) | (1 << (myParser.Length - 139)) | (1 << (myParser.Vector - 139)) | (1 << (myParser.Find - 139)) | (1 << (myParser.Push_back - 139)))) != 0):
                        self.state = 234
                        self.initializerList()


                    self.state = 237
                    self.match(myParser.RightParen)
                    pass
                elif token in [myParser.LeftBrace]:
                    self.state = 238
                    self.bracedInitList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 267
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 265
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                    if la_ == 1:
                        localctx = myParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 243
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 244
                        self.match(myParser.LeftBracket)
                        self.state = 247
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [myParser.IntegerLiteral, myParser.CharacterLiteral, myParser.FloatingLiteral, myParser.StringLiteral, myParser.BooleanLiteral, myParser.PointerLiteral, myParser.Auto, myParser.Bool, myParser.Char, myParser.Delete, myParser.Double, myParser.Float, myParser.Int, myParser.Long, myParser.New, myParser.Operator, myParser.Short, myParser.Signed, myParser.Sizeof, myParser.Unsigned, myParser.Void, myParser.LeftParen, myParser.Plus, myParser.Minus, myParser.Star, myParser.And, myParser.Or, myParser.Tilde, myParser.Not, myParser.PlusPlus, myParser.MinusMinus, myParser.Doublecolon, myParser.Identifier, myParser.Stack, myParser.Push, myParser.Empty, myParser.Pop, myParser.Top, myParser.Cin, myParser.Cout, myParser.String, myParser.Length, myParser.Vector, myParser.Find, myParser.Push_back]:
                            self.state = 245
                            self.expression()
                            pass
                        elif token in [myParser.LeftBrace]:
                            self.state = 246
                            self.bracedInitList()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 249
                        self.match(myParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = myParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 251
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 252
                        self.match(myParser.LeftParen)
                        self.state = 254
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.IntegerLiteral) | (1 << myParser.CharacterLiteral) | (1 << myParser.FloatingLiteral) | (1 << myParser.StringLiteral) | (1 << myParser.BooleanLiteral) | (1 << myParser.PointerLiteral) | (1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Char) | (1 << myParser.Delete) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.New) | (1 << myParser.Operator) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Sizeof))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (myParser.Unsigned - 75)) | (1 << (myParser.Void - 75)) | (1 << (myParser.LeftParen - 75)) | (1 << (myParser.LeftBrace - 75)) | (1 << (myParser.Plus - 75)) | (1 << (myParser.Minus - 75)) | (1 << (myParser.Star - 75)) | (1 << (myParser.And - 75)) | (1 << (myParser.Or - 75)) | (1 << (myParser.Tilde - 75)) | (1 << (myParser.Not - 75)) | (1 << (myParser.PlusPlus - 75)) | (1 << (myParser.MinusMinus - 75)) | (1 << (myParser.Doublecolon - 75)) | (1 << (myParser.Identifier - 75)) | (1 << (myParser.Stack - 75)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (myParser.Push - 139)) | (1 << (myParser.Empty - 139)) | (1 << (myParser.Pop - 139)) | (1 << (myParser.Top - 139)) | (1 << (myParser.Cin - 139)) | (1 << (myParser.Cout - 139)) | (1 << (myParser.String - 139)) | (1 << (myParser.Length - 139)) | (1 << (myParser.Vector - 139)) | (1 << (myParser.Find - 139)) | (1 << (myParser.Push_back - 139)))) != 0):
                            self.state = 253
                            self.initializerList()


                        self.state = 256
                        self.match(myParser.RightParen)
                        pass

                    elif la_ == 3:
                        localctx = myParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 257
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 258
                        _la = self._input.LA(1)
                        if not(_la==myParser.Arrow or _la==myParser.Dot):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                        self.state = 260
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==myParser.Template:
                            self.state = 259
                            self.match(myParser.Template)


                        self.state = 262
                        self.idExpression()
                        pass

                    elif la_ == 4:
                        localctx = myParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 263
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 264
                        _la = self._input.LA(1)
                        if not(_la==myParser.PlusPlus or _la==myParser.MinusMinus):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

             
                self.state = 269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(myParser.PostfixExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(myParser.UnaryExpressionContext,0)


        def PlusPlus(self):
            return self.getToken(myParser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(myParser.MinusMinus, 0)

        def unaryOperator(self):
            return self.getTypedRuleContext(myParser.UnaryOperatorContext,0)


        def Sizeof(self):
            return self.getToken(myParser.Sizeof, 0)

        def newExpression(self):
            return self.getTypedRuleContext(myParser.NewExpressionContext,0)


        def deleteExpression(self):
            return self.getTypedRuleContext(myParser.DeleteExpressionContext,0)


        def getRuleIndex(self):
            return myParser.RULE_unaryExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpression" ):
                return visitor.visitUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryExpression(self):

        localctx = myParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_unaryExpression)
        try:
            self.state = 280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 270
                self.postfixExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 275
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [myParser.PlusPlus]:
                    self.state = 271
                    self.match(myParser.PlusPlus)
                    pass
                elif token in [myParser.MinusMinus]:
                    self.state = 272
                    self.match(myParser.MinusMinus)
                    pass
                elif token in [myParser.Plus, myParser.Minus, myParser.Star, myParser.And, myParser.Or, myParser.Tilde, myParser.Not]:
                    self.state = 273
                    self.unaryOperator()
                    pass
                elif token in [myParser.Sizeof]:
                    self.state = 274
                    self.match(myParser.Sizeof)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 277
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 278
                self.newExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 279
                self.deleteExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Or(self):
            return self.getToken(myParser.Or, 0)

        def Star(self):
            return self.getToken(myParser.Star, 0)

        def And(self):
            return self.getToken(myParser.And, 0)

        def Plus(self):
            return self.getToken(myParser.Plus, 0)

        def Tilde(self):
            return self.getToken(myParser.Tilde, 0)

        def Minus(self):
            return self.getToken(myParser.Minus, 0)

        def Not(self):
            return self.getToken(myParser.Not, 0)

        def getRuleIndex(self):
            return myParser.RULE_unaryOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperator" ):
                return visitor.visitUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryOperator(self):

        localctx = myParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            _la = self._input.LA(1)
            if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (myParser.Plus - 88)) | (1 << (myParser.Minus - 88)) | (1 << (myParser.Star - 88)) | (1 << (myParser.And - 88)) | (1 << (myParser.Or - 88)) | (1 << (myParser.Tilde - 88)) | (1 << (myParser.Not - 88)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(myParser.New, 0)

        def newTypeId(self):
            return self.getTypedRuleContext(myParser.NewTypeIdContext,0)


        def Doublecolon(self):
            return self.getToken(myParser.Doublecolon, 0)

        def LeftParen(self):
            return self.getToken(myParser.LeftParen, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(myParser.TheTypeIdContext,0)


        def RightParen(self):
            return self.getToken(myParser.RightParen, 0)

        def getRuleIndex(self):
            return myParser.RULE_newExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewExpression" ):
                return visitor.visitNewExpression(self)
            else:
                return visitor.visitChildren(self)




    def newExpression(self):

        localctx = myParser.NewExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_newExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==myParser.Doublecolon:
                self.state = 284
                self.match(myParser.Doublecolon)


            self.state = 287
            self.match(myParser.New)
            self.state = 293
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.Auto, myParser.Bool, myParser.Char, myParser.Class, myParser.Const, myParser.Double, myParser.Float, myParser.Int, myParser.Long, myParser.Short, myParser.Signed, myParser.Struct, myParser.Unsigned, myParser.Void, myParser.Volatile, myParser.Identifier, myParser.Stack, myParser.String, myParser.Vector]:
                self.state = 288
                self.newTypeId()
                pass
            elif token in [myParser.LeftParen]:
                self.state = 289
                self.match(myParser.LeftParen)
                self.state = 290
                self.theTypeId()
                self.state = 291
                self.match(myParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewTypeIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifierSeq(self):
            return self.getTypedRuleContext(myParser.TypeSpecifierSeqContext,0)


        def newDeclarator(self):
            return self.getTypedRuleContext(myParser.NewDeclaratorContext,0)


        def getRuleIndex(self):
            return myParser.RULE_newTypeId

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewTypeId" ):
                return visitor.visitNewTypeId(self)
            else:
                return visitor.visitChildren(self)




    def newTypeId(self):

        localctx = myParser.NewTypeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_newTypeId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self.typeSpecifierSeq()
            self.state = 297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 296
                self.newDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointerOperator(self):
            return self.getTypedRuleContext(myParser.PointerOperatorContext,0)


        def newDeclarator(self):
            return self.getTypedRuleContext(myParser.NewDeclaratorContext,0)


        def noPointerNewDeclarator(self):
            return self.getTypedRuleContext(myParser.NoPointerNewDeclaratorContext,0)


        def getRuleIndex(self):
            return myParser.RULE_newDeclarator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewDeclarator" ):
                return visitor.visitNewDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def newDeclarator(self):

        localctx = myParser.NewDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_newDeclarator)
        try:
            self.state = 304
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.Star, myParser.And, myParser.AndAnd]:
                self.enterOuterAlt(localctx, 1)
                self.state = 299
                self.pointerOperator()
                self.state = 301
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 300
                    self.newDeclarator()


                pass
            elif token in [myParser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 303
                self.noPointerNewDeclarator(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoPointerNewDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(myParser.LeftBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(myParser.ExpressionContext,0)


        def RightBracket(self):
            return self.getToken(myParser.RightBracket, 0)

        def noPointerNewDeclarator(self):
            return self.getTypedRuleContext(myParser.NoPointerNewDeclaratorContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(myParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return myParser.RULE_noPointerNewDeclarator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoPointerNewDeclarator" ):
                return visitor.visitNoPointerNewDeclarator(self)
            else:
                return visitor.visitChildren(self)



    def noPointerNewDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = myParser.NoPointerNewDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_noPointerNewDeclarator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.match(myParser.LeftBracket)
            self.state = 308
            self.expression()
            self.state = 309
            self.match(myParser.RightBracket)
            self._ctx.stop = self._input.LT(-1)
            self.state = 318
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = myParser.NoPointerNewDeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noPointerNewDeclarator)
                    self.state = 311
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 312
                    self.match(myParser.LeftBracket)
                    self.state = 313
                    self.constantExpression()
                    self.state = 314
                    self.match(myParser.RightBracket) 
                self.state = 320
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DeleteExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(myParser.Delete, 0)

        def castExpression(self):
            return self.getTypedRuleContext(myParser.CastExpressionContext,0)


        def Doublecolon(self):
            return self.getToken(myParser.Doublecolon, 0)

        def LeftBracket(self):
            return self.getToken(myParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(myParser.RightBracket, 0)

        def getRuleIndex(self):
            return myParser.RULE_deleteExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteExpression" ):
                return visitor.visitDeleteExpression(self)
            else:
                return visitor.visitChildren(self)




    def deleteExpression(self):

        localctx = myParser.DeleteExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_deleteExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==myParser.Doublecolon:
                self.state = 321
                self.match(myParser.Doublecolon)


            self.state = 324
            self.match(myParser.Delete)
            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==myParser.LeftBracket:
                self.state = 325
                self.match(myParser.LeftBracket)
                self.state = 326
                self.match(myParser.RightBracket)


            self.state = 329
            self.castExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(myParser.UnaryExpressionContext,0)


        def LeftParen(self):
            return self.getToken(myParser.LeftParen, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(myParser.TheTypeIdContext,0)


        def RightParen(self):
            return self.getToken(myParser.RightParen, 0)

        def castExpression(self):
            return self.getTypedRuleContext(myParser.CastExpressionContext,0)


        def getRuleIndex(self):
            return myParser.RULE_castExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpression" ):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)




    def castExpression(self):

        localctx = myParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_castExpression)
        try:
            self.state = 337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 331
                self.unaryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 332
                self.match(myParser.LeftParen)
                self.state = 333
                self.theTypeId()
                self.state = 334
                self.match(myParser.RightParen)
                self.state = 335
                self.castExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerMemberExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.CastExpressionContext)
            else:
                return self.getTypedRuleContext(myParser.CastExpressionContext,i)


        def DotStar(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.DotStar)
            else:
                return self.getToken(myParser.DotStar, i)

        def ArrowStar(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.ArrowStar)
            else:
                return self.getToken(myParser.ArrowStar, i)

        def getRuleIndex(self):
            return myParser.RULE_pointerMemberExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerMemberExpression" ):
                return visitor.visitPointerMemberExpression(self)
            else:
                return visitor.visitChildren(self)




    def pointerMemberExpression(self):

        localctx = myParser.PointerMemberExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_pointerMemberExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.castExpression()
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==myParser.ArrowStar or _la==myParser.DotStar:
                self.state = 340
                _la = self._input.LA(1)
                if not(_la==myParser.ArrowStar or _la==myParser.DotStar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 341
                self.castExpression()
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointerMemberExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.PointerMemberExpressionContext)
            else:
                return self.getTypedRuleContext(myParser.PointerMemberExpressionContext,i)


        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Star)
            else:
                return self.getToken(myParser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Div)
            else:
                return self.getToken(myParser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Mod)
            else:
                return self.getToken(myParser.Mod, i)

        def getRuleIndex(self):
            return myParser.RULE_multiplicativeExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeExpression(self):

        localctx = myParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.pointerMemberExpression()
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (myParser.Star - 90)) | (1 << (myParser.Div - 90)) | (1 << (myParser.Mod - 90)))) != 0):
                self.state = 348
                _la = self._input.LA(1)
                if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (myParser.Star - 90)) | (1 << (myParser.Div - 90)) | (1 << (myParser.Mod - 90)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 349
                self.pointerMemberExpression()
                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(myParser.MultiplicativeExpressionContext,i)


        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Plus)
            else:
                return self.getToken(myParser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Minus)
            else:
                return self.getToken(myParser.Minus, i)

        def getRuleIndex(self):
            return myParser.RULE_additiveExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)




    def additiveExpression(self):

        localctx = myParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.multiplicativeExpression()
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==myParser.Plus or _la==myParser.Minus:
                self.state = 356
                _la = self._input.LA(1)
                if not(_la==myParser.Plus or _la==myParser.Minus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 357
                self.multiplicativeExpression()
                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(myParser.AdditiveExpressionContext,i)


        def shiftOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.ShiftOperatorContext)
            else:
                return self.getTypedRuleContext(myParser.ShiftOperatorContext,i)


        def getRuleIndex(self):
            return myParser.RULE_shiftExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftExpression" ):
                return visitor.visitShiftExpression(self)
            else:
                return visitor.visitChildren(self)




    def shiftExpression(self):

        localctx = myParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_shiftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.additiveExpression()
            self.state = 369
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 364
                    self.shiftOperator()
                    self.state = 365
                    self.additiveExpression() 
                self.state = 371
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Greater)
            else:
                return self.getToken(myParser.Greater, i)

        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Less)
            else:
                return self.getToken(myParser.Less, i)

        def getRuleIndex(self):
            return myParser.RULE_shiftOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftOperator" ):
                return visitor.visitShiftOperator(self)
            else:
                return visitor.visitChildren(self)




    def shiftOperator(self):

        localctx = myParser.ShiftOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_shiftOperator)
        try:
            self.state = 376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.Greater]:
                self.enterOuterAlt(localctx, 1)
                self.state = 372
                self.match(myParser.Greater)
                self.state = 373
                self.match(myParser.Greater)
                pass
            elif token in [myParser.Less]:
                self.enterOuterAlt(localctx, 2)
                self.state = 374
                self.match(myParser.Less)
                self.state = 375
                self.match(myParser.Less)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(myParser.ShiftExpressionContext,i)


        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Less)
            else:
                return self.getToken(myParser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Greater)
            else:
                return self.getToken(myParser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.LessEqual)
            else:
                return self.getToken(myParser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.GreaterEqual)
            else:
                return self.getToken(myParser.GreaterEqual, i)

        def getRuleIndex(self):
            return myParser.RULE_relationalExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalExpression" ):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)




    def relationalExpression(self):

        localctx = myParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.shiftExpression()
            self.state = 383
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 379
                    _la = self._input.LA(1)
                    if not(((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (myParser.Less - 99)) | (1 << (myParser.Greater - 99)) | (1 << (myParser.LessEqual - 99)) | (1 << (myParser.GreaterEqual - 99)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 380
                    self.shiftExpression() 
                self.state = 385
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(myParser.RelationalExpressionContext,i)


        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Equal)
            else:
                return self.getToken(myParser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.NotEqual)
            else:
                return self.getToken(myParser.NotEqual, i)

        def getRuleIndex(self):
            return myParser.RULE_equalityExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)




    def equalityExpression(self):

        localctx = myParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.relationalExpression()
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==myParser.Equal or _la==myParser.NotEqual:
                self.state = 387
                _la = self._input.LA(1)
                if not(_la==myParser.Equal or _la==myParser.NotEqual):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 388
                self.relationalExpression()
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(myParser.EqualityExpressionContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.And)
            else:
                return self.getToken(myParser.And, i)

        def getRuleIndex(self):
            return myParser.RULE_andExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndExpression" ):
                return visitor.visitAndExpression(self)
            else:
                return visitor.visitChildren(self)




    def andExpression(self):

        localctx = myParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_andExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.equalityExpression()
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==myParser.And:
                self.state = 395
                self.match(myParser.And)
                self.state = 396
                self.equalityExpression()
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(myParser.AndExpressionContext,i)


        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Caret)
            else:
                return self.getToken(myParser.Caret, i)

        def getRuleIndex(self):
            return myParser.RULE_exclusiveOrExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclusiveOrExpression" ):
                return visitor.visitExclusiveOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def exclusiveOrExpression(self):

        localctx = myParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_exclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.andExpression()
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==myParser.Caret:
                self.state = 403
                self.match(myParser.Caret)
                self.state = 404
                self.andExpression()
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(myParser.ExclusiveOrExpressionContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Or)
            else:
                return self.getToken(myParser.Or, i)

        def getRuleIndex(self):
            return myParser.RULE_inclusiveOrExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclusiveOrExpression" ):
                return visitor.visitInclusiveOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def inclusiveOrExpression(self):

        localctx = myParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_inclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.exclusiveOrExpression()
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==myParser.Or:
                self.state = 411
                self.match(myParser.Or)
                self.state = 412
                self.exclusiveOrExpression()
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(myParser.InclusiveOrExpressionContext,i)


        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.AndAnd)
            else:
                return self.getToken(myParser.AndAnd, i)

        def getRuleIndex(self):
            return myParser.RULE_logicalAndExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)




    def logicalAndExpression(self):

        localctx = myParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_logicalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.inclusiveOrExpression()
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==myParser.AndAnd:
                self.state = 419
                self.match(myParser.AndAnd)
                self.state = 420
                self.inclusiveOrExpression()
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(myParser.LogicalAndExpressionContext,i)


        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.OrOr)
            else:
                return self.getToken(myParser.OrOr, i)

        def getRuleIndex(self):
            return myParser.RULE_logicalOrExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpression" ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def logicalOrExpression(self):

        localctx = myParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.logicalAndExpression()
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==myParser.OrOr:
                self.state = 427
                self.match(myParser.OrOr)
                self.state = 428
                self.logicalAndExpression()
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(myParser.LogicalOrExpressionContext,0)


        def Question(self):
            return self.getToken(myParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(myParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(myParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(myParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return myParser.RULE_conditionalExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalExpression" ):
                return visitor.visitConditionalExpression(self)
            else:
                return visitor.visitChildren(self)




    def conditionalExpression(self):

        localctx = myParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_conditionalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.logicalOrExpression()
            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==myParser.Question:
                self.state = 435
                self.match(myParser.Question)
                self.state = 436
                self.expression()
                self.state = 437
                self.match(myParser.Colon)
                self.state = 438
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(myParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(myParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(myParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(myParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(myParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(myParser.MinusAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(myParser.RightShiftAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(myParser.LeftShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(myParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(myParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(myParser.OrAssign, 0)

        def getRuleIndex(self):
            return myParser.RULE_assignmentOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = myParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            _la = self._input.LA(1)
            if not(((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & ((1 << (myParser.Assign - 98)) | (1 << (myParser.PlusAssign - 98)) | (1 << (myParser.MinusAssign - 98)) | (1 << (myParser.StarAssign - 98)) | (1 << (myParser.DivAssign - 98)) | (1 << (myParser.ModAssign - 98)) | (1 << (myParser.XorAssign - 98)) | (1 << (myParser.AndAssign - 98)) | (1 << (myParser.OrAssign - 98)) | (1 << (myParser.LeftShiftAssign - 98)) | (1 << (myParser.RightShiftAssign - 98)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.ConditionalExpressionContext)
            else:
                return self.getTypedRuleContext(myParser.ConditionalExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Comma)
            else:
                return self.getToken(myParser.Comma, i)

        def getRuleIndex(self):
            return myParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = myParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.conditionalExpression()
            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==myParser.Comma:
                self.state = 445
                self.match(myParser.Comma)
                self.state = 446
                self.conditionalExpression()
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(myParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return myParser.RULE_constantExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpression" ):
                return visitor.visitConstantExpression(self)
            else:
                return visitor.visitChildren(self)




    def constantExpression(self):

        localctx = myParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(myParser.LabeledStatementContext,0)


        def simpleDeclaration(self):
            return self.getTypedRuleContext(myParser.SimpleDeclarationContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(myParser.ExpressionStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(myParser.CompoundStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(myParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(myParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(myParser.JumpStatementContext,0)


        def getRuleIndex(self):
            return myParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = myParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_statement)
        try:
            self.state = 463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 454
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 455
                self.simpleDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 461
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [myParser.IntegerLiteral, myParser.CharacterLiteral, myParser.FloatingLiteral, myParser.StringLiteral, myParser.BooleanLiteral, myParser.PointerLiteral, myParser.Auto, myParser.Bool, myParser.Char, myParser.Delete, myParser.Double, myParser.Float, myParser.Int, myParser.Long, myParser.New, myParser.Operator, myParser.Short, myParser.Signed, myParser.Sizeof, myParser.Unsigned, myParser.Void, myParser.LeftParen, myParser.Plus, myParser.Minus, myParser.Star, myParser.And, myParser.Or, myParser.Tilde, myParser.Not, myParser.PlusPlus, myParser.MinusMinus, myParser.Doublecolon, myParser.Semi, myParser.Identifier, myParser.Stack, myParser.Push, myParser.Empty, myParser.Pop, myParser.Top, myParser.Cin, myParser.Cout, myParser.String, myParser.Length, myParser.Vector, myParser.Find, myParser.Push_back]:
                    self.state = 456
                    self.expressionStatement()
                    pass
                elif token in [myParser.LeftBrace]:
                    self.state = 457
                    self.compoundStatement()
                    pass
                elif token in [myParser.If, myParser.Switch]:
                    self.state = 458
                    self.selectionStatement()
                    pass
                elif token in [myParser.Do, myParser.For, myParser.While]:
                    self.state = 459
                    self.iterationStatement()
                    pass
                elif token in [myParser.Break, myParser.Continue, myParser.Return]:
                    self.state = 460
                    self.jumpStatement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(myParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(myParser.StatementContext,0)


        def Identifier(self):
            return self.getToken(myParser.Identifier, 0)

        def Case(self):
            return self.getToken(myParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(myParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(myParser.Default, 0)

        def getRuleIndex(self):
            return myParser.RULE_labeledStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledStatement" ):
                return visitor.visitLabeledStatement(self)
            else:
                return visitor.visitChildren(self)




    def labeledStatement(self):

        localctx = myParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_labeledStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.Identifier]:
                self.state = 465
                self.match(myParser.Identifier)
                pass
            elif token in [myParser.Case]:
                self.state = 466
                self.match(myParser.Case)
                self.state = 467
                self.constantExpression()
                pass
            elif token in [myParser.Default]:
                self.state = 468
                self.match(myParser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 471
            self.match(myParser.Colon)
            self.state = 472
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(myParser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(myParser.ExpressionContext,0)


        def getRuleIndex(self):
            return myParser.RULE_expressionStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = myParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.IntegerLiteral) | (1 << myParser.CharacterLiteral) | (1 << myParser.FloatingLiteral) | (1 << myParser.StringLiteral) | (1 << myParser.BooleanLiteral) | (1 << myParser.PointerLiteral) | (1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Char) | (1 << myParser.Delete) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.New) | (1 << myParser.Operator) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Sizeof))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (myParser.Unsigned - 75)) | (1 << (myParser.Void - 75)) | (1 << (myParser.LeftParen - 75)) | (1 << (myParser.Plus - 75)) | (1 << (myParser.Minus - 75)) | (1 << (myParser.Star - 75)) | (1 << (myParser.And - 75)) | (1 << (myParser.Or - 75)) | (1 << (myParser.Tilde - 75)) | (1 << (myParser.Not - 75)) | (1 << (myParser.PlusPlus - 75)) | (1 << (myParser.MinusMinus - 75)) | (1 << (myParser.Doublecolon - 75)) | (1 << (myParser.Identifier - 75)) | (1 << (myParser.Stack - 75)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (myParser.Push - 139)) | (1 << (myParser.Empty - 139)) | (1 << (myParser.Pop - 139)) | (1 << (myParser.Top - 139)) | (1 << (myParser.Cin - 139)) | (1 << (myParser.Cout - 139)) | (1 << (myParser.String - 139)) | (1 << (myParser.Length - 139)) | (1 << (myParser.Vector - 139)) | (1 << (myParser.Find - 139)) | (1 << (myParser.Push_back - 139)))) != 0):
                self.state = 474
                self.expression()


            self.state = 477
            self.match(myParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(myParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(myParser.RightBrace, 0)

        def statementSeq(self):
            return self.getTypedRuleContext(myParser.StatementSeqContext,0)


        def getRuleIndex(self):
            return myParser.RULE_compoundStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundStatement" ):
                return visitor.visitCompoundStatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundStatement(self):

        localctx = myParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(myParser.LeftBrace)
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.IntegerLiteral) | (1 << myParser.CharacterLiteral) | (1 << myParser.FloatingLiteral) | (1 << myParser.StringLiteral) | (1 << myParser.BooleanLiteral) | (1 << myParser.PointerLiteral) | (1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Break) | (1 << myParser.Case) | (1 << myParser.Char) | (1 << myParser.Class) | (1 << myParser.Const) | (1 << myParser.Continue) | (1 << myParser.Default) | (1 << myParser.Delete) | (1 << myParser.Do) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.For) | (1 << myParser.If) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.New) | (1 << myParser.Operator) | (1 << myParser.Return) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Sizeof) | (1 << myParser.Struct))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (myParser.Switch - 64)) | (1 << (myParser.Typedef - 64)) | (1 << (myParser.Unsigned - 64)) | (1 << (myParser.Void - 64)) | (1 << (myParser.Volatile - 64)) | (1 << (myParser.While - 64)) | (1 << (myParser.LeftParen - 64)) | (1 << (myParser.LeftBrace - 64)) | (1 << (myParser.Plus - 64)) | (1 << (myParser.Minus - 64)) | (1 << (myParser.Star - 64)) | (1 << (myParser.And - 64)) | (1 << (myParser.Or - 64)) | (1 << (myParser.Tilde - 64)) | (1 << (myParser.Not - 64)) | (1 << (myParser.AndAnd - 64)) | (1 << (myParser.PlusPlus - 64)) | (1 << (myParser.MinusMinus - 64)) | (1 << (myParser.Doublecolon - 64)) | (1 << (myParser.Semi - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (myParser.Ellipsis - 128)) | (1 << (myParser.Identifier - 128)) | (1 << (myParser.Stack - 128)) | (1 << (myParser.Push - 128)) | (1 << (myParser.Empty - 128)) | (1 << (myParser.Pop - 128)) | (1 << (myParser.Top - 128)) | (1 << (myParser.Cin - 128)) | (1 << (myParser.Cout - 128)) | (1 << (myParser.String - 128)) | (1 << (myParser.Length - 128)) | (1 << (myParser.Vector - 128)) | (1 << (myParser.Find - 128)) | (1 << (myParser.Push_back - 128)))) != 0):
                self.state = 480
                self.statementSeq()


            self.state = 483
            self.match(myParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.StatementContext)
            else:
                return self.getTypedRuleContext(myParser.StatementContext,i)


        def getRuleIndex(self):
            return myParser.RULE_statementSeq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementSeq" ):
                return visitor.visitStatementSeq(self)
            else:
                return visitor.visitChildren(self)




    def statementSeq(self):

        localctx = myParser.StatementSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_statementSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 485
                self.statement()
                self.state = 488 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.IntegerLiteral) | (1 << myParser.CharacterLiteral) | (1 << myParser.FloatingLiteral) | (1 << myParser.StringLiteral) | (1 << myParser.BooleanLiteral) | (1 << myParser.PointerLiteral) | (1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Break) | (1 << myParser.Case) | (1 << myParser.Char) | (1 << myParser.Class) | (1 << myParser.Const) | (1 << myParser.Continue) | (1 << myParser.Default) | (1 << myParser.Delete) | (1 << myParser.Do) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.For) | (1 << myParser.If) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.New) | (1 << myParser.Operator) | (1 << myParser.Return) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Sizeof) | (1 << myParser.Struct))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (myParser.Switch - 64)) | (1 << (myParser.Typedef - 64)) | (1 << (myParser.Unsigned - 64)) | (1 << (myParser.Void - 64)) | (1 << (myParser.Volatile - 64)) | (1 << (myParser.While - 64)) | (1 << (myParser.LeftParen - 64)) | (1 << (myParser.LeftBrace - 64)) | (1 << (myParser.Plus - 64)) | (1 << (myParser.Minus - 64)) | (1 << (myParser.Star - 64)) | (1 << (myParser.And - 64)) | (1 << (myParser.Or - 64)) | (1 << (myParser.Tilde - 64)) | (1 << (myParser.Not - 64)) | (1 << (myParser.AndAnd - 64)) | (1 << (myParser.PlusPlus - 64)) | (1 << (myParser.MinusMinus - 64)) | (1 << (myParser.Doublecolon - 64)) | (1 << (myParser.Semi - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (myParser.Ellipsis - 128)) | (1 << (myParser.Identifier - 128)) | (1 << (myParser.Stack - 128)) | (1 << (myParser.Push - 128)) | (1 << (myParser.Empty - 128)) | (1 << (myParser.Pop - 128)) | (1 << (myParser.Top - 128)) | (1 << (myParser.Cin - 128)) | (1 << (myParser.Cout - 128)) | (1 << (myParser.String - 128)) | (1 << (myParser.Length - 128)) | (1 << (myParser.Vector - 128)) | (1 << (myParser.Find - 128)) | (1 << (myParser.Push_back - 128)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(myParser.If, 0)

        def LeftParen(self):
            return self.getToken(myParser.LeftParen, 0)

        def condition(self):
            return self.getTypedRuleContext(myParser.ConditionContext,0)


        def RightParen(self):
            return self.getToken(myParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.StatementContext)
            else:
                return self.getTypedRuleContext(myParser.StatementContext,i)


        def Else(self):
            return self.getToken(myParser.Else, 0)

        def Switch(self):
            return self.getToken(myParser.Switch, 0)

        def getRuleIndex(self):
            return myParser.RULE_selectionStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionStatement" ):
                return visitor.visitSelectionStatement(self)
            else:
                return visitor.visitChildren(self)




    def selectionStatement(self):

        localctx = myParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_selectionStatement)
        try:
            self.state = 505
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 490
                self.match(myParser.If)
                self.state = 491
                self.match(myParser.LeftParen)
                self.state = 492
                self.condition()
                self.state = 493
                self.match(myParser.RightParen)
                self.state = 494
                self.statement()
                self.state = 497
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 495
                    self.match(myParser.Else)
                    self.state = 496
                    self.statement()


                pass
            elif token in [myParser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 499
                self.match(myParser.Switch)
                self.state = 500
                self.match(myParser.LeftParen)
                self.state = 501
                self.condition()
                self.state = 502
                self.match(myParser.RightParen)
                self.state = 503
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(myParser.ExpressionContext,0)


        def declSpecifierSeq(self):
            return self.getTypedRuleContext(myParser.DeclSpecifierSeqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(myParser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(myParser.Assign, 0)

        def initializerClause(self):
            return self.getTypedRuleContext(myParser.InitializerClauseContext,0)


        def bracedInitList(self):
            return self.getTypedRuleContext(myParser.BracedInitListContext,0)


        def getRuleIndex(self):
            return myParser.RULE_condition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = myParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_condition)
        try:
            self.state = 515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 507
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 508
                self.declSpecifierSeq()
                self.state = 509
                self.declarator()
                self.state = 513
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [myParser.Assign]:
                    self.state = 510
                    self.match(myParser.Assign)
                    self.state = 511
                    self.initializerClause()
                    pass
                elif token in [myParser.LeftBrace]:
                    self.state = 512
                    self.bracedInitList()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(myParser.While, 0)

        def LeftParen(self):
            return self.getToken(myParser.LeftParen, 0)

        def condition(self):
            return self.getTypedRuleContext(myParser.ConditionContext,0)


        def RightParen(self):
            return self.getToken(myParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(myParser.StatementContext,0)


        def Do(self):
            return self.getToken(myParser.Do, 0)

        def expression(self):
            return self.getTypedRuleContext(myParser.ExpressionContext,0)


        def Semi(self):
            return self.getToken(myParser.Semi, 0)

        def For(self):
            return self.getToken(myParser.For, 0)

        def forInitStatement(self):
            return self.getTypedRuleContext(myParser.ForInitStatementContext,0)


        def getRuleIndex(self):
            return myParser.RULE_iterationStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationStatement" ):
                return visitor.visitIterationStatement(self)
            else:
                return visitor.visitChildren(self)




    def iterationStatement(self):

        localctx = myParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_iterationStatement)
        self._la = 0 # Token type
        try:
            self.state = 544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.While]:
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self.match(myParser.While)
                self.state = 518
                self.match(myParser.LeftParen)
                self.state = 519
                self.condition()
                self.state = 520
                self.match(myParser.RightParen)
                self.state = 521
                self.statement()
                pass
            elif token in [myParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 523
                self.match(myParser.Do)
                self.state = 524
                self.statement()
                self.state = 525
                self.match(myParser.While)
                self.state = 526
                self.match(myParser.LeftParen)
                self.state = 527
                self.expression()
                self.state = 528
                self.match(myParser.RightParen)
                self.state = 529
                self.match(myParser.Semi)
                pass
            elif token in [myParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 531
                self.match(myParser.For)
                self.state = 532
                self.match(myParser.LeftParen)

                self.state = 533
                self.forInitStatement()
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.IntegerLiteral) | (1 << myParser.CharacterLiteral) | (1 << myParser.FloatingLiteral) | (1 << myParser.StringLiteral) | (1 << myParser.BooleanLiteral) | (1 << myParser.PointerLiteral) | (1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Char) | (1 << myParser.Class) | (1 << myParser.Const) | (1 << myParser.Delete) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.New) | (1 << myParser.Operator) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Sizeof) | (1 << myParser.Struct))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (myParser.Typedef - 71)) | (1 << (myParser.Unsigned - 71)) | (1 << (myParser.Void - 71)) | (1 << (myParser.Volatile - 71)) | (1 << (myParser.LeftParen - 71)) | (1 << (myParser.Plus - 71)) | (1 << (myParser.Minus - 71)) | (1 << (myParser.Star - 71)) | (1 << (myParser.And - 71)) | (1 << (myParser.Or - 71)) | (1 << (myParser.Tilde - 71)) | (1 << (myParser.Not - 71)) | (1 << (myParser.PlusPlus - 71)) | (1 << (myParser.MinusMinus - 71)) | (1 << (myParser.Doublecolon - 71)) | (1 << (myParser.Identifier - 71)))) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (myParser.Stack - 138)) | (1 << (myParser.Push - 138)) | (1 << (myParser.Empty - 138)) | (1 << (myParser.Pop - 138)) | (1 << (myParser.Top - 138)) | (1 << (myParser.Cin - 138)) | (1 << (myParser.Cout - 138)) | (1 << (myParser.String - 138)) | (1 << (myParser.Length - 138)) | (1 << (myParser.Vector - 138)) | (1 << (myParser.Find - 138)) | (1 << (myParser.Push_back - 138)))) != 0):
                    self.state = 534
                    self.condition()


                self.state = 537
                self.match(myParser.Semi)
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.IntegerLiteral) | (1 << myParser.CharacterLiteral) | (1 << myParser.FloatingLiteral) | (1 << myParser.StringLiteral) | (1 << myParser.BooleanLiteral) | (1 << myParser.PointerLiteral) | (1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Char) | (1 << myParser.Delete) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.New) | (1 << myParser.Operator) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Sizeof))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (myParser.Unsigned - 75)) | (1 << (myParser.Void - 75)) | (1 << (myParser.LeftParen - 75)) | (1 << (myParser.Plus - 75)) | (1 << (myParser.Minus - 75)) | (1 << (myParser.Star - 75)) | (1 << (myParser.And - 75)) | (1 << (myParser.Or - 75)) | (1 << (myParser.Tilde - 75)) | (1 << (myParser.Not - 75)) | (1 << (myParser.PlusPlus - 75)) | (1 << (myParser.MinusMinus - 75)) | (1 << (myParser.Doublecolon - 75)) | (1 << (myParser.Identifier - 75)) | (1 << (myParser.Stack - 75)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (myParser.Push - 139)) | (1 << (myParser.Empty - 139)) | (1 << (myParser.Pop - 139)) | (1 << (myParser.Top - 139)) | (1 << (myParser.Cin - 139)) | (1 << (myParser.Cout - 139)) | (1 << (myParser.String - 139)) | (1 << (myParser.Length - 139)) | (1 << (myParser.Vector - 139)) | (1 << (myParser.Find - 139)) | (1 << (myParser.Push_back - 139)))) != 0):
                    self.state = 538
                    self.expression()


                self.state = 541
                self.match(myParser.RightParen)
                self.state = 542
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionStatement(self):
            return self.getTypedRuleContext(myParser.ExpressionStatementContext,0)


        def simpleDeclaration(self):
            return self.getTypedRuleContext(myParser.SimpleDeclarationContext,0)


        def getRuleIndex(self):
            return myParser.RULE_forInitStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInitStatement" ):
                return visitor.visitForInitStatement(self)
            else:
                return visitor.visitChildren(self)




    def forInitStatement(self):

        localctx = myParser.ForInitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_forInitStatement)
        try:
            self.state = 548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 546
                self.expressionStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 547
                self.simpleDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(myParser.Semi, 0)

        def Break(self):
            return self.getToken(myParser.Break, 0)

        def Continue(self):
            return self.getToken(myParser.Continue, 0)

        def Return(self):
            return self.getToken(myParser.Return, 0)

        def expression(self):
            return self.getTypedRuleContext(myParser.ExpressionContext,0)


        def bracedInitList(self):
            return self.getTypedRuleContext(myParser.BracedInitListContext,0)


        def getRuleIndex(self):
            return myParser.RULE_jumpStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpStatement" ):
                return visitor.visitJumpStatement(self)
            else:
                return visitor.visitChildren(self)




    def jumpStatement(self):

        localctx = myParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_jumpStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.Break]:
                self.state = 550
                self.match(myParser.Break)
                pass
            elif token in [myParser.Continue]:
                self.state = 551
                self.match(myParser.Continue)
                pass
            elif token in [myParser.Return]:
                self.state = 552
                self.match(myParser.Return)
                self.state = 555
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [myParser.IntegerLiteral, myParser.CharacterLiteral, myParser.FloatingLiteral, myParser.StringLiteral, myParser.BooleanLiteral, myParser.PointerLiteral, myParser.Auto, myParser.Bool, myParser.Char, myParser.Delete, myParser.Double, myParser.Float, myParser.Int, myParser.Long, myParser.New, myParser.Operator, myParser.Short, myParser.Signed, myParser.Sizeof, myParser.Unsigned, myParser.Void, myParser.LeftParen, myParser.Plus, myParser.Minus, myParser.Star, myParser.And, myParser.Or, myParser.Tilde, myParser.Not, myParser.PlusPlus, myParser.MinusMinus, myParser.Doublecolon, myParser.Identifier, myParser.Stack, myParser.Push, myParser.Empty, myParser.Pop, myParser.Top, myParser.Cin, myParser.Cout, myParser.String, myParser.Length, myParser.Vector, myParser.Find, myParser.Push_back]:
                    self.state = 553
                    self.expression()
                    pass
                elif token in [myParser.LeftBrace]:
                    self.state = 554
                    self.bracedInitList()
                    pass
                elif token in [myParser.Semi]:
                    pass
                else:
                    pass
                pass
            else:
                raise NoViableAltException(self)

            self.state = 559
            self.match(myParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(myParser.DeclarationContext,i)


        def getRuleIndex(self):
            return myParser.RULE_declarationseq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationseq" ):
                return visitor.visitDeclarationseq(self)
            else:
                return visitor.visitChildren(self)




    def declarationseq(self):

        localctx = myParser.DeclarationseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_declarationseq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 561
                self.declaration()
                self.state = 564 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Char) | (1 << myParser.Class) | (1 << myParser.Const) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.Operator) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Struct))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (myParser.Template - 65)) | (1 << (myParser.Typedef - 65)) | (1 << (myParser.Unsigned - 65)) | (1 << (myParser.Void - 65)) | (1 << (myParser.Volatile - 65)) | (1 << (myParser.LeftParen - 65)) | (1 << (myParser.Star - 65)) | (1 << (myParser.And - 65)) | (1 << (myParser.AndAnd - 65)) | (1 << (myParser.Semi - 65)) | (1 << (myParser.Ellipsis - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (myParser.Identifier - 129)) | (1 << (myParser.Stack - 129)) | (1 << (myParser.Push - 129)) | (1 << (myParser.Empty - 129)) | (1 << (myParser.Pop - 129)) | (1 << (myParser.Top - 129)) | (1 << (myParser.Cin - 129)) | (1 << (myParser.Cout - 129)) | (1 << (myParser.String - 129)) | (1 << (myParser.Length - 129)) | (1 << (myParser.Vector - 129)) | (1 << (myParser.Find - 129)) | (1 << (myParser.Push_back - 129)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDeclaration(self):
            return self.getTypedRuleContext(myParser.SimpleDeclarationContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(myParser.FunctionDefinitionContext,0)


        def templateDeclaration(self):
            return self.getTypedRuleContext(myParser.TemplateDeclarationContext,0)


        def explicitInstantiation(self):
            return self.getTypedRuleContext(myParser.ExplicitInstantiationContext,0)


        def Semi(self):
            return self.getToken(myParser.Semi, 0)

        def getRuleIndex(self):
            return myParser.RULE_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = myParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_declaration)
        try:
            self.state = 571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 566
                self.simpleDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 567
                self.functionDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 568
                self.templateDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 569
                self.explicitInstantiation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 570
                self.match(myParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(myParser.Semi, 0)

        def declSpecifierSeq(self):
            return self.getTypedRuleContext(myParser.DeclSpecifierSeqContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(myParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return myParser.RULE_simpleDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleDeclaration" ):
                return visitor.visitSimpleDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def simpleDeclaration(self):

        localctx = myParser.SimpleDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_simpleDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 573
                self.declSpecifierSeq()


            self.state = 577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & ((1 << (myParser.Operator - 49)) | (1 << (myParser.LeftParen - 49)) | (1 << (myParser.Star - 49)) | (1 << (myParser.And - 49)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (myParser.AndAnd - 115)) | (1 << (myParser.Ellipsis - 115)) | (1 << (myParser.Identifier - 115)) | (1 << (myParser.Push - 115)) | (1 << (myParser.Empty - 115)) | (1 << (myParser.Pop - 115)) | (1 << (myParser.Top - 115)) | (1 << (myParser.Cin - 115)) | (1 << (myParser.Cout - 115)) | (1 << (myParser.Length - 115)) | (1 << (myParser.Find - 115)) | (1 << (myParser.Push_back - 115)))) != 0):
                self.state = 576
                self.initDeclaratorList()


            self.state = 579
            self.match(myParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(myParser.TypeSpecifierContext,0)


        def Typedef(self):
            return self.getToken(myParser.Typedef, 0)

        def getRuleIndex(self):
            return myParser.RULE_declSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclSpecifier" ):
                return visitor.visitDeclSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def declSpecifier(self):

        localctx = myParser.DeclSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_declSpecifier)
        try:
            self.state = 583
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.Auto, myParser.Bool, myParser.Char, myParser.Class, myParser.Const, myParser.Double, myParser.Float, myParser.Int, myParser.Long, myParser.Short, myParser.Signed, myParser.Struct, myParser.Unsigned, myParser.Void, myParser.Volatile, myParser.Identifier, myParser.Stack, myParser.String, myParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 581
                self.typeSpecifier()
                pass
            elif token in [myParser.Typedef]:
                self.enterOuterAlt(localctx, 2)
                self.state = 582
                self.match(myParser.Typedef)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclSpecifierSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.DeclSpecifierContext)
            else:
                return self.getTypedRuleContext(myParser.DeclSpecifierContext,i)


        def getRuleIndex(self):
            return myParser.RULE_declSpecifierSeq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclSpecifierSeq" ):
                return visitor.visitDeclSpecifierSeq(self)
            else:
                return visitor.visitChildren(self)




    def declSpecifierSeq(self):

        localctx = myParser.DeclSpecifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_declSpecifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 585
                    self.declSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 588 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedefNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(myParser.Identifier, 0)

        def getRuleIndex(self):
            return myParser.RULE_typedefName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedefName" ):
                return visitor.visitTypedefName(self)
            else:
                return visitor.visitChildren(self)




    def typedefName(self):

        localctx = myParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(myParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingTypeSpecifier(self):
            return self.getTypedRuleContext(myParser.TrailingTypeSpecifierContext,0)


        def classSpecifier(self):
            return self.getTypedRuleContext(myParser.ClassSpecifierContext,0)


        def getRuleIndex(self):
            return myParser.RULE_typeSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSpecifier" ):
                return visitor.visitTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def typeSpecifier(self):

        localctx = myParser.TypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_typeSpecifier)
        try:
            self.state = 594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.Auto, myParser.Bool, myParser.Char, myParser.Const, myParser.Double, myParser.Float, myParser.Int, myParser.Long, myParser.Short, myParser.Signed, myParser.Unsigned, myParser.Void, myParser.Volatile, myParser.Identifier, myParser.Stack, myParser.String, myParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self.trailingTypeSpecifier()
                pass
            elif token in [myParser.Class, myParser.Struct]:
                self.enterOuterAlt(localctx, 2)
                self.state = 593
                self.classSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleTypeSpecifier(self):
            return self.getTypedRuleContext(myParser.SimpleTypeSpecifierContext,0)


        def cvQualifier(self):
            return self.getTypedRuleContext(myParser.CvQualifierContext,0)


        def getRuleIndex(self):
            return myParser.RULE_trailingTypeSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingTypeSpecifier" ):
                return visitor.visitTrailingTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def trailingTypeSpecifier(self):

        localctx = myParser.TrailingTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_trailingTypeSpecifier)
        try:
            self.state = 598
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.Auto, myParser.Bool, myParser.Char, myParser.Double, myParser.Float, myParser.Int, myParser.Long, myParser.Short, myParser.Signed, myParser.Unsigned, myParser.Void, myParser.Identifier, myParser.Stack, myParser.String, myParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 596
                self.simpleTypeSpecifier()
                pass
            elif token in [myParser.Const, myParser.Volatile]:
                self.enterOuterAlt(localctx, 2)
                self.state = 597
                self.cvQualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierSeqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.TypeSpecifierContext)
            else:
                return self.getTypedRuleContext(myParser.TypeSpecifierContext,i)


        def getRuleIndex(self):
            return myParser.RULE_typeSpecifierSeq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSpecifierSeq" ):
                return visitor.visitTypeSpecifierSeq(self)
            else:
                return visitor.visitChildren(self)




    def typeSpecifierSeq(self):

        localctx = myParser.TypeSpecifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_typeSpecifierSeq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 600
                self.typeSpecifier()
                self.state = 603 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Char) | (1 << myParser.Class) | (1 << myParser.Const) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Struct))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (myParser.Unsigned - 75)) | (1 << (myParser.Void - 75)) | (1 << (myParser.Volatile - 75)) | (1 << (myParser.Identifier - 75)) | (1 << (myParser.Stack - 75)))) != 0) or _la==myParser.String or _la==myParser.Vector):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleTypeLengthModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Short(self):
            return self.getToken(myParser.Short, 0)

        def Long(self):
            return self.getToken(myParser.Long, 0)

        def getRuleIndex(self):
            return myParser.RULE_simpleTypeLengthModifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleTypeLengthModifier" ):
                return visitor.visitSimpleTypeLengthModifier(self)
            else:
                return visitor.visitChildren(self)




    def simpleTypeLengthModifier(self):

        localctx = myParser.SimpleTypeLengthModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_simpleTypeLengthModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            _la = self._input.LA(1)
            if not(_la==myParser.Long or _la==myParser.Short):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleTypeSignednessModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Unsigned(self):
            return self.getToken(myParser.Unsigned, 0)

        def Signed(self):
            return self.getToken(myParser.Signed, 0)

        def getRuleIndex(self):
            return myParser.RULE_simpleTypeSignednessModifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleTypeSignednessModifier" ):
                return visitor.visitSimpleTypeSignednessModifier(self)
            else:
                return visitor.visitChildren(self)




    def simpleTypeSignednessModifier(self):

        localctx = myParser.SimpleTypeSignednessModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_simpleTypeSignednessModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            _la = self._input.LA(1)
            if not(_la==myParser.Signed or _la==myParser.Unsigned):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def theTypeName(self):
            return self.getTypedRuleContext(myParser.TheTypeNameContext,0)


        def simpleTypeSignednessModifier(self):
            return self.getTypedRuleContext(myParser.SimpleTypeSignednessModifierContext,0)


        def simpleTypeLengthModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.SimpleTypeLengthModifierContext)
            else:
                return self.getTypedRuleContext(myParser.SimpleTypeLengthModifierContext,i)


        def Char(self):
            return self.getToken(myParser.Char, 0)

        def Bool(self):
            return self.getToken(myParser.Bool, 0)

        def Int(self):
            return self.getToken(myParser.Int, 0)

        def Float(self):
            return self.getToken(myParser.Float, 0)

        def Double(self):
            return self.getToken(myParser.Double, 0)

        def Void(self):
            return self.getToken(myParser.Void, 0)

        def Auto(self):
            return self.getToken(myParser.Auto, 0)

        def getRuleIndex(self):
            return myParser.RULE_simpleTypeSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleTypeSpecifier" ):
                return visitor.visitSimpleTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def simpleTypeSpecifier(self):

        localctx = myParser.SimpleTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_simpleTypeSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.theTypeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.simpleTypeSignednessModifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==myParser.Signed or _la==myParser.Unsigned:
                    self.state = 611
                    self.simpleTypeSignednessModifier()


                self.state = 615 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 614
                        self.simpleTypeLengthModifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 617 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==myParser.Signed or _la==myParser.Unsigned:
                    self.state = 619
                    self.simpleTypeSignednessModifier()


                self.state = 622
                self.match(myParser.Char)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 623
                self.match(myParser.Bool)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==myParser.Signed or _la==myParser.Unsigned:
                    self.state = 624
                    self.simpleTypeSignednessModifier()


                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==myParser.Long or _la==myParser.Short:
                    self.state = 627
                    self.simpleTypeLengthModifier()
                    self.state = 632
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 633
                self.match(myParser.Int)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 634
                self.match(myParser.Float)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==myParser.Long or _la==myParser.Short:
                    self.state = 635
                    self.simpleTypeLengthModifier()


                self.state = 638
                self.match(myParser.Double)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 639
                self.match(myParser.Void)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 640
                self.match(myParser.Auto)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TheTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def className(self):
            return self.getTypedRuleContext(myParser.ClassNameContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(myParser.TypedefNameContext,0)


        def simpleTemplateId(self):
            return self.getTypedRuleContext(myParser.SimpleTemplateIdContext,0)


        def getRuleIndex(self):
            return myParser.RULE_theTypeName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheTypeName" ):
                return visitor.visitTheTypeName(self)
            else:
                return visitor.visitChildren(self)




    def theTypeName(self):

        localctx = myParser.TheTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_theTypeName)
        try:
            self.state = 646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 643
                self.className()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 644
                self.typedefName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 645
                self.simpleTemplateId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(myParser.InitDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Comma)
            else:
                return self.getToken(myParser.Comma, i)

        def getRuleIndex(self):
            return myParser.RULE_initDeclaratorList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclaratorList" ):
                return visitor.visitInitDeclaratorList(self)
            else:
                return visitor.visitChildren(self)




    def initDeclaratorList(self):

        localctx = myParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.initDeclarator()
            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==myParser.Comma:
                self.state = 649
                self.match(myParser.Comma)
                self.state = 650
                self.initDeclarator()
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(myParser.DeclaratorContext,0)


        def initializer(self):
            return self.getTypedRuleContext(myParser.InitializerContext,0)


        def getRuleIndex(self):
            return myParser.RULE_initDeclarator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclarator" ):
                return visitor.visitInitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def initDeclarator(self):

        localctx = myParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.declarator()
            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (myParser.LeftParen - 82)) | (1 << (myParser.LeftBrace - 82)) | (1 << (myParser.Assign - 82)))) != 0):
                self.state = 657
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointerDeclarator(self):
            return self.getTypedRuleContext(myParser.PointerDeclaratorContext,0)


        def getRuleIndex(self):
            return myParser.RULE_declarator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarator" ):
                return visitor.visitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def declarator(self):

        localctx = myParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.pointerDeclarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noPointerDeclarator(self):
            return self.getTypedRuleContext(myParser.NoPointerDeclaratorContext,0)


        def pointerOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.PointerOperatorContext)
            else:
                return self.getTypedRuleContext(myParser.PointerOperatorContext,i)


        def Const(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Const)
            else:
                return self.getToken(myParser.Const, i)

        def getRuleIndex(self):
            return myParser.RULE_pointerDeclarator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerDeclarator" ):
                return visitor.visitPointerDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def pointerDeclarator(self):

        localctx = myParser.PointerDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_pointerDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (myParser.Star - 90)) | (1 << (myParser.And - 90)) | (1 << (myParser.AndAnd - 90)))) != 0):
                self.state = 662
                self.pointerOperator()
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==myParser.Const:
                    self.state = 663
                    self.match(myParser.Const)


                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 671
            self.noPointerDeclarator(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoPointerDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaratorid(self):
            return self.getTypedRuleContext(myParser.DeclaratoridContext,0)


        def LeftParen(self):
            return self.getToken(myParser.LeftParen, 0)

        def pointerDeclarator(self):
            return self.getTypedRuleContext(myParser.PointerDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(myParser.RightParen, 0)

        def noPointerDeclarator(self):
            return self.getTypedRuleContext(myParser.NoPointerDeclaratorContext,0)


        def parametersAndQualifiers(self):
            return self.getTypedRuleContext(myParser.ParametersAndQualifiersContext,0)


        def LeftBracket(self):
            return self.getToken(myParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(myParser.RightBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(myParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return myParser.RULE_noPointerDeclarator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoPointerDeclarator" ):
                return visitor.visitNoPointerDeclarator(self)
            else:
                return visitor.visitChildren(self)



    def noPointerDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = myParser.NoPointerDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 110
        self.enterRecursionRule(localctx, 110, self.RULE_noPointerDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.Operator, myParser.Ellipsis, myParser.Identifier, myParser.Push, myParser.Empty, myParser.Pop, myParser.Top, myParser.Cin, myParser.Cout, myParser.Length, myParser.Find, myParser.Push_back]:
                self.state = 674
                self.declaratorid()
                pass
            elif token in [myParser.LeftParen]:
                self.state = 675
                self.match(myParser.LeftParen)
                self.state = 676
                self.pointerDeclarator()
                self.state = 677
                self.match(myParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 692
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = myParser.NoPointerDeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noPointerDeclarator)
                    self.state = 681
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 688
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [myParser.LeftParen]:
                        self.state = 682
                        self.parametersAndQualifiers()
                        pass
                    elif token in [myParser.LeftBracket]:
                        self.state = 683
                        self.match(myParser.LeftBracket)
                        self.state = 685
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.IntegerLiteral) | (1 << myParser.CharacterLiteral) | (1 << myParser.FloatingLiteral) | (1 << myParser.StringLiteral) | (1 << myParser.BooleanLiteral) | (1 << myParser.PointerLiteral) | (1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Char) | (1 << myParser.Delete) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.New) | (1 << myParser.Operator) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Sizeof))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (myParser.Unsigned - 75)) | (1 << (myParser.Void - 75)) | (1 << (myParser.LeftParen - 75)) | (1 << (myParser.Plus - 75)) | (1 << (myParser.Minus - 75)) | (1 << (myParser.Star - 75)) | (1 << (myParser.And - 75)) | (1 << (myParser.Or - 75)) | (1 << (myParser.Tilde - 75)) | (1 << (myParser.Not - 75)) | (1 << (myParser.PlusPlus - 75)) | (1 << (myParser.MinusMinus - 75)) | (1 << (myParser.Doublecolon - 75)) | (1 << (myParser.Identifier - 75)) | (1 << (myParser.Stack - 75)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (myParser.Push - 139)) | (1 << (myParser.Empty - 139)) | (1 << (myParser.Pop - 139)) | (1 << (myParser.Top - 139)) | (1 << (myParser.Cin - 139)) | (1 << (myParser.Cout - 139)) | (1 << (myParser.String - 139)) | (1 << (myParser.Length - 139)) | (1 << (myParser.Vector - 139)) | (1 << (myParser.Find - 139)) | (1 << (myParser.Push_back - 139)))) != 0):
                            self.state = 684
                            self.constantExpression()


                        self.state = 687
                        self.match(myParser.RightBracket)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 694
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParametersAndQualifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(myParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(myParser.RightParen, 0)

        def parameterDeclarationClause(self):
            return self.getTypedRuleContext(myParser.ParameterDeclarationClauseContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(myParser.CvqualifierseqContext,0)


        def refqualifier(self):
            return self.getTypedRuleContext(myParser.RefqualifierContext,0)


        def getRuleIndex(self):
            return myParser.RULE_parametersAndQualifiers

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParametersAndQualifiers" ):
                return visitor.visitParametersAndQualifiers(self)
            else:
                return visitor.visitChildren(self)




    def parametersAndQualifiers(self):

        localctx = myParser.ParametersAndQualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_parametersAndQualifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(myParser.LeftParen)
            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Char) | (1 << myParser.Class) | (1 << myParser.Const) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Struct))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (myParser.Typedef - 71)) | (1 << (myParser.Unsigned - 71)) | (1 << (myParser.Void - 71)) | (1 << (myParser.Volatile - 71)) | (1 << (myParser.Identifier - 71)))) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (myParser.Stack - 138)) | (1 << (myParser.String - 138)) | (1 << (myParser.Vector - 138)))) != 0):
                self.state = 696
                self.parameterDeclarationClause()


            self.state = 699
            self.match(myParser.RightParen)
            self.state = 701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 700
                self.cvqualifierseq()


            self.state = 704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 703
                self.refqualifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(myParser.And, 0)

        def AndAnd(self):
            return self.getToken(myParser.AndAnd, 0)

        def Star(self):
            return self.getToken(myParser.Star, 0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(myParser.CvqualifierseqContext,0)


        def getRuleIndex(self):
            return myParser.RULE_pointerOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerOperator" ):
                return visitor.visitPointerOperator(self)
            else:
                return visitor.visitChildren(self)




    def pointerOperator(self):

        localctx = myParser.PointerOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_pointerOperator)
        self._la = 0 # Token type
        try:
            self.state = 711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.And, myParser.AndAnd]:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                _la = self._input.LA(1)
                if not(_la==myParser.And or _la==myParser.AndAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [myParser.Star]:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self.match(myParser.Star)
                self.state = 709
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 708
                    self.cvqualifierseq()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CvqualifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cvQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.CvQualifierContext)
            else:
                return self.getTypedRuleContext(myParser.CvQualifierContext,i)


        def getRuleIndex(self):
            return myParser.RULE_cvqualifierseq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCvqualifierseq" ):
                return visitor.visitCvqualifierseq(self)
            else:
                return visitor.visitChildren(self)




    def cvqualifierseq(self):

        localctx = myParser.CvqualifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_cvqualifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 713
                    self.cvQualifier()

                else:
                    raise NoViableAltException(self)
                self.state = 716 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CvQualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(myParser.Const, 0)

        def Volatile(self):
            return self.getToken(myParser.Volatile, 0)

        def getRuleIndex(self):
            return myParser.RULE_cvQualifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCvQualifier" ):
                return visitor.visitCvQualifier(self)
            else:
                return visitor.visitChildren(self)




    def cvQualifier(self):

        localctx = myParser.CvQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_cvQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            _la = self._input.LA(1)
            if not(_la==myParser.Const or _la==myParser.Volatile):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefqualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(myParser.And, 0)

        def AndAnd(self):
            return self.getToken(myParser.AndAnd, 0)

        def getRuleIndex(self):
            return myParser.RULE_refqualifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefqualifier" ):
                return visitor.visitRefqualifier(self)
            else:
                return visitor.visitChildren(self)




    def refqualifier(self):

        localctx = myParser.RefqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_refqualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            _la = self._input.LA(1)
            if not(_la==myParser.And or _la==myParser.AndAnd):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratoridContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idExpression(self):
            return self.getTypedRuleContext(myParser.IdExpressionContext,0)


        def Ellipsis(self):
            return self.getToken(myParser.Ellipsis, 0)

        def getRuleIndex(self):
            return myParser.RULE_declaratorid

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaratorid" ):
                return visitor.visitDeclaratorid(self)
            else:
                return visitor.visitChildren(self)




    def declaratorid(self):

        localctx = myParser.DeclaratoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_declaratorid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==myParser.Ellipsis:
                self.state = 722
                self.match(myParser.Ellipsis)


            self.state = 725
            self.idExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TheTypeIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifierSeq(self):
            return self.getTypedRuleContext(myParser.TypeSpecifierSeqContext,0)


        def getRuleIndex(self):
            return myParser.RULE_theTypeId

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheTypeId" ):
                return visitor.visitTheTypeId(self)
            else:
                return visitor.visitChildren(self)




    def theTypeId(self):

        localctx = myParser.TheTypeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_theTypeId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.typeSpecifierSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclarationList(self):
            return self.getTypedRuleContext(myParser.ParameterDeclarationListContext,0)


        def Ellipsis(self):
            return self.getToken(myParser.Ellipsis, 0)

        def Comma(self):
            return self.getToken(myParser.Comma, 0)

        def getRuleIndex(self):
            return myParser.RULE_parameterDeclarationClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDeclarationClause" ):
                return visitor.visitParameterDeclarationClause(self)
            else:
                return visitor.visitChildren(self)




    def parameterDeclarationClause(self):

        localctx = myParser.ParameterDeclarationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_parameterDeclarationClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.parameterDeclarationList()
            self.state = 734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==myParser.Comma or _la==myParser.Ellipsis:
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==myParser.Comma:
                    self.state = 730
                    self.match(myParser.Comma)


                self.state = 733
                self.match(myParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(myParser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Comma)
            else:
                return self.getToken(myParser.Comma, i)

        def getRuleIndex(self):
            return myParser.RULE_parameterDeclarationList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDeclarationList" ):
                return visitor.visitParameterDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def parameterDeclarationList(self):

        localctx = myParser.ParameterDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_parameterDeclarationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.parameterDeclaration()
            self.state = 741
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 737
                    self.match(myParser.Comma)
                    self.state = 738
                    self.parameterDeclaration() 
                self.state = 743
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declSpecifierSeq(self):
            return self.getTypedRuleContext(myParser.DeclSpecifierSeqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(myParser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(myParser.Assign, 0)

        def initializerClause(self):
            return self.getTypedRuleContext(myParser.InitializerClauseContext,0)


        def getRuleIndex(self):
            return myParser.RULE_parameterDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDeclaration" ):
                return visitor.visitParameterDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def parameterDeclaration(self):

        localctx = myParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.declSpecifierSeq()
            self.state = 745
            self.declarator()
            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==myParser.Assign:
                self.state = 746
                self.match(myParser.Assign)
                self.state = 747
                self.initializerClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(myParser.DeclaratorContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(myParser.FunctionBodyContext,0)


        def declSpecifierSeq(self):
            return self.getTypedRuleContext(myParser.DeclSpecifierSeqContext,0)


        def getRuleIndex(self):
            return myParser.RULE_functionDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = myParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_functionDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 750
                self.declSpecifierSeq()


            self.state = 753
            self.declarator()
            self.state = 754
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(myParser.CompoundStatementContext,0)


        def Assign(self):
            return self.getToken(myParser.Assign, 0)

        def Semi(self):
            return self.getToken(myParser.Semi, 0)

        def Default(self):
            return self.getToken(myParser.Default, 0)

        def Delete(self):
            return self.getToken(myParser.Delete, 0)

        def getRuleIndex(self):
            return myParser.RULE_functionBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionBody" ):
                return visitor.visitFunctionBody(self)
            else:
                return visitor.visitChildren(self)




    def functionBody(self):

        localctx = myParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_functionBody)
        self._la = 0 # Token type
        try:
            self.state = 760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.LeftBrace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 756
                self.compoundStatement()
                pass
            elif token in [myParser.Assign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 757
                self.match(myParser.Assign)
                self.state = 758
                _la = self._input.LA(1)
                if not(_la==myParser.Default or _la==myParser.Delete):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 759
                self.match(myParser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def braceOrEqualInitializer(self):
            return self.getTypedRuleContext(myParser.BraceOrEqualInitializerContext,0)


        def LeftParen(self):
            return self.getToken(myParser.LeftParen, 0)

        def initializerList(self):
            return self.getTypedRuleContext(myParser.InitializerListContext,0)


        def RightParen(self):
            return self.getToken(myParser.RightParen, 0)

        def getRuleIndex(self):
            return myParser.RULE_initializer

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = myParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_initializer)
        try:
            self.state = 767
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.LeftBrace, myParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.braceOrEqualInitializer()
                pass
            elif token in [myParser.LeftParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 763
                self.match(myParser.LeftParen)
                self.state = 764
                self.initializerList()
                self.state = 765
                self.match(myParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BraceOrEqualInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(myParser.Assign, 0)

        def initializerClause(self):
            return self.getTypedRuleContext(myParser.InitializerClauseContext,0)


        def bracedInitList(self):
            return self.getTypedRuleContext(myParser.BracedInitListContext,0)


        def getRuleIndex(self):
            return myParser.RULE_braceOrEqualInitializer

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBraceOrEqualInitializer" ):
                return visitor.visitBraceOrEqualInitializer(self)
            else:
                return visitor.visitChildren(self)




    def braceOrEqualInitializer(self):

        localctx = myParser.BraceOrEqualInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_braceOrEqualInitializer)
        try:
            self.state = 772
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 769
                self.match(myParser.Assign)
                self.state = 770
                self.initializerClause()
                pass
            elif token in [myParser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.bracedInitList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(myParser.ConditionalExpressionContext,0)


        def bracedInitList(self):
            return self.getTypedRuleContext(myParser.BracedInitListContext,0)


        def getRuleIndex(self):
            return myParser.RULE_initializerClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerClause" ):
                return visitor.visitInitializerClause(self)
            else:
                return visitor.visitChildren(self)




    def initializerClause(self):

        localctx = myParser.InitializerClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_initializerClause)
        try:
            self.state = 776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.IntegerLiteral, myParser.CharacterLiteral, myParser.FloatingLiteral, myParser.StringLiteral, myParser.BooleanLiteral, myParser.PointerLiteral, myParser.Auto, myParser.Bool, myParser.Char, myParser.Delete, myParser.Double, myParser.Float, myParser.Int, myParser.Long, myParser.New, myParser.Operator, myParser.Short, myParser.Signed, myParser.Sizeof, myParser.Unsigned, myParser.Void, myParser.LeftParen, myParser.Plus, myParser.Minus, myParser.Star, myParser.And, myParser.Or, myParser.Tilde, myParser.Not, myParser.PlusPlus, myParser.MinusMinus, myParser.Doublecolon, myParser.Identifier, myParser.Stack, myParser.Push, myParser.Empty, myParser.Pop, myParser.Top, myParser.Cin, myParser.Cout, myParser.String, myParser.Length, myParser.Vector, myParser.Find, myParser.Push_back]:
                self.enterOuterAlt(localctx, 1)
                self.state = 774
                self.conditionalExpression()
                pass
            elif token in [myParser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 775
                self.bracedInitList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.InitializerClauseContext)
            else:
                return self.getTypedRuleContext(myParser.InitializerClauseContext,i)


        def Ellipsis(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Ellipsis)
            else:
                return self.getToken(myParser.Ellipsis, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Comma)
            else:
                return self.getToken(myParser.Comma, i)

        def getRuleIndex(self):
            return myParser.RULE_initializerList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerList" ):
                return visitor.visitInitializerList(self)
            else:
                return visitor.visitChildren(self)




    def initializerList(self):

        localctx = myParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.initializerClause()
            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==myParser.Ellipsis:
                self.state = 779
                self.match(myParser.Ellipsis)


            self.state = 789
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 782
                    self.match(myParser.Comma)
                    self.state = 783
                    self.initializerClause()
                    self.state = 785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==myParser.Ellipsis:
                        self.state = 784
                        self.match(myParser.Ellipsis)

             
                self.state = 791
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BracedInitListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(myParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(myParser.RightBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(myParser.InitializerListContext,0)


        def Comma(self):
            return self.getToken(myParser.Comma, 0)

        def getRuleIndex(self):
            return myParser.RULE_bracedInitList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracedInitList" ):
                return visitor.visitBracedInitList(self)
            else:
                return visitor.visitChildren(self)




    def bracedInitList(self):

        localctx = myParser.BracedInitListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_bracedInitList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(myParser.LeftBrace)
            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.IntegerLiteral) | (1 << myParser.CharacterLiteral) | (1 << myParser.FloatingLiteral) | (1 << myParser.StringLiteral) | (1 << myParser.BooleanLiteral) | (1 << myParser.PointerLiteral) | (1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Char) | (1 << myParser.Delete) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.New) | (1 << myParser.Operator) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Sizeof))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (myParser.Unsigned - 75)) | (1 << (myParser.Void - 75)) | (1 << (myParser.LeftParen - 75)) | (1 << (myParser.LeftBrace - 75)) | (1 << (myParser.Plus - 75)) | (1 << (myParser.Minus - 75)) | (1 << (myParser.Star - 75)) | (1 << (myParser.And - 75)) | (1 << (myParser.Or - 75)) | (1 << (myParser.Tilde - 75)) | (1 << (myParser.Not - 75)) | (1 << (myParser.PlusPlus - 75)) | (1 << (myParser.MinusMinus - 75)) | (1 << (myParser.Doublecolon - 75)) | (1 << (myParser.Identifier - 75)) | (1 << (myParser.Stack - 75)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (myParser.Push - 139)) | (1 << (myParser.Empty - 139)) | (1 << (myParser.Pop - 139)) | (1 << (myParser.Top - 139)) | (1 << (myParser.Cin - 139)) | (1 << (myParser.Cout - 139)) | (1 << (myParser.String - 139)) | (1 << (myParser.Length - 139)) | (1 << (myParser.Vector - 139)) | (1 << (myParser.Find - 139)) | (1 << (myParser.Push_back - 139)))) != 0):
                self.state = 793
                self.initializerList()
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==myParser.Comma:
                    self.state = 794
                    self.match(myParser.Comma)




            self.state = 799
            self.match(myParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(myParser.Identifier, 0)

        def simpleTemplateId(self):
            return self.getTypedRuleContext(myParser.SimpleTemplateIdContext,0)


        def myClass(self):
            return self.getTypedRuleContext(myParser.MyClassContext,0)


        def getRuleIndex(self):
            return myParser.RULE_className

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassName" ):
                return visitor.visitClassName(self)
            else:
                return visitor.visitChildren(self)




    def className(self):

        localctx = myParser.ClassNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_className)
        try:
            self.state = 804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 801
                self.match(myParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 802
                self.simpleTemplateId()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 803
                self.myClass()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classHead(self):
            return self.getTypedRuleContext(myParser.ClassHeadContext,0)


        def LeftBrace(self):
            return self.getToken(myParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(myParser.RightBrace, 0)

        def memberSpecification(self):
            return self.getTypedRuleContext(myParser.MemberSpecificationContext,0)


        def getRuleIndex(self):
            return myParser.RULE_classSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassSpecifier" ):
                return visitor.visitClassSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def classSpecifier(self):

        localctx = myParser.ClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_classSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.classHead()
            self.state = 807
            self.match(myParser.LeftBrace)
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Char) | (1 << myParser.Class) | (1 << myParser.Const) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.Operator) | (1 << myParser.Private) | (1 << myParser.Protected) | (1 << myParser.Public) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Struct))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (myParser.Template - 65)) | (1 << (myParser.Typedef - 65)) | (1 << (myParser.Unsigned - 65)) | (1 << (myParser.Void - 65)) | (1 << (myParser.Volatile - 65)) | (1 << (myParser.LeftParen - 65)) | (1 << (myParser.Star - 65)) | (1 << (myParser.And - 65)) | (1 << (myParser.AndAnd - 65)) | (1 << (myParser.Colon - 65)) | (1 << (myParser.Semi - 65)) | (1 << (myParser.Ellipsis - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (myParser.Identifier - 129)) | (1 << (myParser.Stack - 129)) | (1 << (myParser.Push - 129)) | (1 << (myParser.Empty - 129)) | (1 << (myParser.Pop - 129)) | (1 << (myParser.Top - 129)) | (1 << (myParser.Cin - 129)) | (1 << (myParser.Cout - 129)) | (1 << (myParser.String - 129)) | (1 << (myParser.Length - 129)) | (1 << (myParser.Vector - 129)) | (1 << (myParser.Find - 129)) | (1 << (myParser.Push_back - 129)))) != 0):
                self.state = 808
                self.memberSpecification()


            self.state = 811
            self.match(myParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classKey(self):
            return self.getTypedRuleContext(myParser.ClassKeyContext,0)


        def classHeadName(self):
            return self.getTypedRuleContext(myParser.ClassHeadNameContext,0)


        def getRuleIndex(self):
            return myParser.RULE_classHead

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassHead" ):
                return visitor.visitClassHead(self)
            else:
                return visitor.visitChildren(self)




    def classHead(self):

        localctx = myParser.ClassHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_classHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.classKey()
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (myParser.Identifier - 129)) | (1 << (myParser.Stack - 129)) | (1 << (myParser.String - 129)) | (1 << (myParser.Vector - 129)))) != 0):
                self.state = 814
                self.classHeadName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassHeadNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def className(self):
            return self.getTypedRuleContext(myParser.ClassNameContext,0)


        def getRuleIndex(self):
            return myParser.RULE_classHeadName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassHeadName" ):
                return visitor.visitClassHeadName(self)
            else:
                return visitor.visitChildren(self)




    def classHeadName(self):

        localctx = myParser.ClassHeadNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_classHeadName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.className()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassKeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(myParser.Class, 0)

        def Struct(self):
            return self.getToken(myParser.Struct, 0)

        def getRuleIndex(self):
            return myParser.RULE_classKey

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassKey" ):
                return visitor.visitClassKey(self)
            else:
                return visitor.visitChildren(self)




    def classKey(self):

        localctx = myParser.ClassKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_classKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            _la = self._input.LA(1)
            if not(_la==myParser.Class or _la==myParser.Struct):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.MemberdeclarationContext)
            else:
                return self.getTypedRuleContext(myParser.MemberdeclarationContext,i)


        def accessSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.AccessSpecifierContext)
            else:
                return self.getTypedRuleContext(myParser.AccessSpecifierContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Colon)
            else:
                return self.getToken(myParser.Colon, i)

        def getRuleIndex(self):
            return myParser.RULE_memberSpecification

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberSpecification" ):
                return visitor.visitMemberSpecification(self)
            else:
                return visitor.visitChildren(self)




    def memberSpecification(self):

        localctx = myParser.MemberSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_memberSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 825
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [myParser.Auto, myParser.Bool, myParser.Char, myParser.Class, myParser.Const, myParser.Double, myParser.Float, myParser.Int, myParser.Long, myParser.Operator, myParser.Short, myParser.Signed, myParser.Struct, myParser.Template, myParser.Typedef, myParser.Unsigned, myParser.Void, myParser.Volatile, myParser.LeftParen, myParser.Star, myParser.And, myParser.AndAnd, myParser.Colon, myParser.Semi, myParser.Ellipsis, myParser.Identifier, myParser.Stack, myParser.Push, myParser.Empty, myParser.Pop, myParser.Top, myParser.Cin, myParser.Cout, myParser.String, myParser.Length, myParser.Vector, myParser.Find, myParser.Push_back]:
                    self.state = 821
                    self.memberdeclaration()
                    pass
                elif token in [myParser.Private, myParser.Protected, myParser.Public]:
                    self.state = 822
                    self.accessSpecifier()
                    self.state = 823
                    self.match(myParser.Colon)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 827 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Char) | (1 << myParser.Class) | (1 << myParser.Const) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.Operator) | (1 << myParser.Private) | (1 << myParser.Protected) | (1 << myParser.Public) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Struct))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (myParser.Template - 65)) | (1 << (myParser.Typedef - 65)) | (1 << (myParser.Unsigned - 65)) | (1 << (myParser.Void - 65)) | (1 << (myParser.Volatile - 65)) | (1 << (myParser.LeftParen - 65)) | (1 << (myParser.Star - 65)) | (1 << (myParser.And - 65)) | (1 << (myParser.AndAnd - 65)) | (1 << (myParser.Colon - 65)) | (1 << (myParser.Semi - 65)) | (1 << (myParser.Ellipsis - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (myParser.Identifier - 129)) | (1 << (myParser.Stack - 129)) | (1 << (myParser.Push - 129)) | (1 << (myParser.Empty - 129)) | (1 << (myParser.Pop - 129)) | (1 << (myParser.Top - 129)) | (1 << (myParser.Cin - 129)) | (1 << (myParser.Cout - 129)) | (1 << (myParser.String - 129)) | (1 << (myParser.Length - 129)) | (1 << (myParser.Vector - 129)) | (1 << (myParser.Find - 129)) | (1 << (myParser.Push_back - 129)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(myParser.Semi, 0)

        def declSpecifierSeq(self):
            return self.getTypedRuleContext(myParser.DeclSpecifierSeqContext,0)


        def memberDeclaratorList(self):
            return self.getTypedRuleContext(myParser.MemberDeclaratorListContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(myParser.FunctionDefinitionContext,0)


        def templateDeclaration(self):
            return self.getTypedRuleContext(myParser.TemplateDeclarationContext,0)


        def getRuleIndex(self):
            return myParser.RULE_memberdeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration" ):
                return visitor.visitMemberdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def memberdeclaration(self):

        localctx = myParser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_memberdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 830
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 829
                    self.declSpecifierSeq()


                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & ((1 << (myParser.Operator - 49)) | (1 << (myParser.LeftParen - 49)) | (1 << (myParser.Star - 49)) | (1 << (myParser.And - 49)))) != 0) or ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (myParser.AndAnd - 115)) | (1 << (myParser.Colon - 115)) | (1 << (myParser.Ellipsis - 115)) | (1 << (myParser.Identifier - 115)) | (1 << (myParser.Push - 115)) | (1 << (myParser.Empty - 115)) | (1 << (myParser.Pop - 115)) | (1 << (myParser.Top - 115)) | (1 << (myParser.Cin - 115)) | (1 << (myParser.Cout - 115)) | (1 << (myParser.Length - 115)) | (1 << (myParser.Find - 115)) | (1 << (myParser.Push_back - 115)))) != 0):
                    self.state = 832
                    self.memberDeclaratorList()


                self.state = 835
                self.match(myParser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 836
                self.functionDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 837
                self.templateDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 838
                self.match(myParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.MemberDeclaratorContext)
            else:
                return self.getTypedRuleContext(myParser.MemberDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Comma)
            else:
                return self.getToken(myParser.Comma, i)

        def getRuleIndex(self):
            return myParser.RULE_memberDeclaratorList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaratorList" ):
                return visitor.visitMemberDeclaratorList(self)
            else:
                return visitor.visitChildren(self)




    def memberDeclaratorList(self):

        localctx = myParser.MemberDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_memberDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.memberDeclarator()
            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==myParser.Comma:
                self.state = 842
                self.match(myParser.Comma)
                self.state = 843
                self.memberDeclarator()
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(myParser.DeclaratorContext,0)


        def braceOrEqualInitializer(self):
            return self.getTypedRuleContext(myParser.BraceOrEqualInitializerContext,0)


        def Colon(self):
            return self.getToken(myParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(myParser.ConstantExpressionContext,0)


        def Identifier(self):
            return self.getToken(myParser.Identifier, 0)

        def getRuleIndex(self):
            return myParser.RULE_memberDeclarator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclarator" ):
                return visitor.visitMemberDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def memberDeclarator(self):

        localctx = myParser.MemberDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_memberDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 849
                self.declarator()
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==myParser.LeftBrace or _la==myParser.Assign:
                    self.state = 850
                    self.braceOrEqualInitializer()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==myParser.Identifier:
                    self.state = 853
                    self.match(myParser.Identifier)


                self.state = 856
                self.match(myParser.Colon)
                self.state = 857
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseSpecifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def className(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.ClassNameContext)
            else:
                return self.getTypedRuleContext(myParser.ClassNameContext,i)


        def Ellipsis(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Ellipsis)
            else:
                return self.getToken(myParser.Ellipsis, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Comma)
            else:
                return self.getToken(myParser.Comma, i)

        def getRuleIndex(self):
            return myParser.RULE_baseSpecifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBaseSpecifierList" ):
                return visitor.visitBaseSpecifierList(self)
            else:
                return visitor.visitChildren(self)




    def baseSpecifierList(self):

        localctx = myParser.BaseSpecifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_baseSpecifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.className()
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==myParser.Ellipsis:
                self.state = 861
                self.match(myParser.Ellipsis)


            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==myParser.Comma:
                self.state = 864
                self.match(myParser.Comma)
                self.state = 865
                self.className()
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==myParser.Ellipsis:
                    self.state = 866
                    self.match(myParser.Ellipsis)


                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Private(self):
            return self.getToken(myParser.Private, 0)

        def Protected(self):
            return self.getToken(myParser.Protected, 0)

        def Public(self):
            return self.getToken(myParser.Public, 0)

        def getRuleIndex(self):
            return myParser.RULE_accessSpecifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessSpecifier" ):
                return visitor.visitAccessSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def accessSpecifier(self):

        localctx = myParser.AccessSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_accessSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.Private) | (1 << myParser.Protected) | (1 << myParser.Public))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemInitializerListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.MemInitializerContext)
            else:
                return self.getTypedRuleContext(myParser.MemInitializerContext,i)


        def Ellipsis(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Ellipsis)
            else:
                return self.getToken(myParser.Ellipsis, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Comma)
            else:
                return self.getToken(myParser.Comma, i)

        def getRuleIndex(self):
            return myParser.RULE_memInitializerList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemInitializerList" ):
                return visitor.visitMemInitializerList(self)
            else:
                return visitor.visitChildren(self)




    def memInitializerList(self):

        localctx = myParser.MemInitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_memInitializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.memInitializer()
            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==myParser.Ellipsis:
                self.state = 877
                self.match(myParser.Ellipsis)


            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==myParser.Comma:
                self.state = 880
                self.match(myParser.Comma)
                self.state = 881
                self.memInitializer()
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==myParser.Ellipsis:
                    self.state = 882
                    self.match(myParser.Ellipsis)


                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializerid(self):
            return self.getTypedRuleContext(myParser.MeminitializeridContext,0)


        def LeftParen(self):
            return self.getToken(myParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(myParser.RightParen, 0)

        def bracedInitList(self):
            return self.getTypedRuleContext(myParser.BracedInitListContext,0)


        def initializerList(self):
            return self.getTypedRuleContext(myParser.InitializerListContext,0)


        def getRuleIndex(self):
            return myParser.RULE_memInitializer

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemInitializer" ):
                return visitor.visitMemInitializer(self)
            else:
                return visitor.visitChildren(self)




    def memInitializer(self):

        localctx = myParser.MemInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_memInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.meminitializerid()
            self.state = 897
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.LeftParen]:
                self.state = 891
                self.match(myParser.LeftParen)
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.IntegerLiteral) | (1 << myParser.CharacterLiteral) | (1 << myParser.FloatingLiteral) | (1 << myParser.StringLiteral) | (1 << myParser.BooleanLiteral) | (1 << myParser.PointerLiteral) | (1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Char) | (1 << myParser.Delete) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.New) | (1 << myParser.Operator) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Sizeof))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (myParser.Unsigned - 75)) | (1 << (myParser.Void - 75)) | (1 << (myParser.LeftParen - 75)) | (1 << (myParser.LeftBrace - 75)) | (1 << (myParser.Plus - 75)) | (1 << (myParser.Minus - 75)) | (1 << (myParser.Star - 75)) | (1 << (myParser.And - 75)) | (1 << (myParser.Or - 75)) | (1 << (myParser.Tilde - 75)) | (1 << (myParser.Not - 75)) | (1 << (myParser.PlusPlus - 75)) | (1 << (myParser.MinusMinus - 75)) | (1 << (myParser.Doublecolon - 75)) | (1 << (myParser.Identifier - 75)) | (1 << (myParser.Stack - 75)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (myParser.Push - 139)) | (1 << (myParser.Empty - 139)) | (1 << (myParser.Pop - 139)) | (1 << (myParser.Top - 139)) | (1 << (myParser.Cin - 139)) | (1 << (myParser.Cout - 139)) | (1 << (myParser.String - 139)) | (1 << (myParser.Length - 139)) | (1 << (myParser.Vector - 139)) | (1 << (myParser.Find - 139)) | (1 << (myParser.Push_back - 139)))) != 0):
                    self.state = 892
                    self.initializerList()


                self.state = 895
                self.match(myParser.RightParen)
                pass
            elif token in [myParser.LeftBrace]:
                self.state = 896
                self.bracedInitList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializeridContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def className(self):
            return self.getTypedRuleContext(myParser.ClassNameContext,0)


        def Identifier(self):
            return self.getToken(myParser.Identifier, 0)

        def getRuleIndex(self):
            return myParser.RULE_meminitializerid

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializerid" ):
                return visitor.visitMeminitializerid(self)
            else:
                return visitor.visitChildren(self)




    def meminitializerid(self):

        localctx = myParser.MeminitializeridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_meminitializerid)
        try:
            self.state = 901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 899
                self.className()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 900
                self.match(myParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorFunctionIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(myParser.Operator, 0)

        def theOperator(self):
            return self.getTypedRuleContext(myParser.TheOperatorContext,0)


        def getRuleIndex(self):
            return myParser.RULE_operatorFunctionId

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperatorFunctionId" ):
                return visitor.visitOperatorFunctionId(self)
            else:
                return visitor.visitChildren(self)




    def operatorFunctionId(self):

        localctx = myParser.OperatorFunctionIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_operatorFunctionId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(myParser.Operator)
            self.state = 904
            self.theOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralOperatorIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(myParser.Operator, 0)

        def StringLiteral(self):
            return self.getToken(myParser.StringLiteral, 0)

        def Identifier(self):
            return self.getToken(myParser.Identifier, 0)

        def getRuleIndex(self):
            return myParser.RULE_literalOperatorId

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralOperatorId" ):
                return visitor.visitLiteralOperatorId(self)
            else:
                return visitor.visitChildren(self)




    def literalOperatorId(self):

        localctx = myParser.LiteralOperatorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_literalOperatorId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.match(myParser.Operator)

            self.state = 907
            self.match(myParser.StringLiteral)
            self.state = 908
            self.match(myParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(myParser.Template, 0)

        def Less(self):
            return self.getToken(myParser.Less, 0)

        def templateparameterList(self):
            return self.getTypedRuleContext(myParser.TemplateparameterListContext,0)


        def Greater(self):
            return self.getToken(myParser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(myParser.DeclarationContext,0)


        def getRuleIndex(self):
            return myParser.RULE_templateDeclaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateDeclaration" ):
                return visitor.visitTemplateDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def templateDeclaration(self):

        localctx = myParser.TemplateDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_templateDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(myParser.Template)
            self.state = 911
            self.match(myParser.Less)
            self.state = 912
            self.templateparameterList()
            self.state = 913
            self.match(myParser.Greater)
            self.state = 914
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateparameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.TemplateParameterContext)
            else:
                return self.getTypedRuleContext(myParser.TemplateParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Comma)
            else:
                return self.getToken(myParser.Comma, i)

        def getRuleIndex(self):
            return myParser.RULE_templateparameterList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateparameterList" ):
                return visitor.visitTemplateparameterList(self)
            else:
                return visitor.visitChildren(self)




    def templateparameterList(self):

        localctx = myParser.TemplateparameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_templateparameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.templateParameter()
            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==myParser.Comma:
                self.state = 917
                self.match(myParser.Comma)
                self.state = 918
                self.templateParameter()
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameter(self):
            return self.getTypedRuleContext(myParser.TypeParameterContext,0)


        def parameterDeclaration(self):
            return self.getTypedRuleContext(myParser.ParameterDeclarationContext,0)


        def getRuleIndex(self):
            return myParser.RULE_templateParameter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateParameter" ):
                return visitor.visitTemplateParameter(self)
            else:
                return visitor.visitChildren(self)




    def templateParameter(self):

        localctx = myParser.TemplateParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_templateParameter)
        try:
            self.state = 926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 924
                self.typeParameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 925
                self.parameterDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(myParser.Class, 0)

        def Typename_(self):
            return self.getToken(myParser.Typename_, 0)

        def Assign(self):
            return self.getToken(myParser.Assign, 0)

        def theTypeId(self):
            return self.getTypedRuleContext(myParser.TheTypeIdContext,0)


        def Template(self):
            return self.getToken(myParser.Template, 0)

        def Less(self):
            return self.getToken(myParser.Less, 0)

        def templateparameterList(self):
            return self.getTypedRuleContext(myParser.TemplateparameterListContext,0)


        def Greater(self):
            return self.getToken(myParser.Greater, 0)

        def Ellipsis(self):
            return self.getToken(myParser.Ellipsis, 0)

        def Identifier(self):
            return self.getToken(myParser.Identifier, 0)

        def getRuleIndex(self):
            return myParser.RULE_typeParameter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameter" ):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def typeParameter(self):

        localctx = myParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.Class, myParser.Template]:
                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==myParser.Template:
                    self.state = 928
                    self.match(myParser.Template)
                    self.state = 929
                    self.match(myParser.Less)
                    self.state = 930
                    self.templateparameterList()
                    self.state = 931
                    self.match(myParser.Greater)


                self.state = 935
                self.match(myParser.Class)
                pass
            elif token in [myParser.Typename_]:
                self.state = 936
                self.match(myParser.Typename_)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==myParser.Ellipsis:
                    self.state = 939
                    self.match(myParser.Ellipsis)


                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==myParser.Identifier:
                    self.state = 942
                    self.match(myParser.Identifier)


                pass

            elif la_ == 2:
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==myParser.Identifier:
                    self.state = 945
                    self.match(myParser.Identifier)


                self.state = 948
                self.match(myParser.Assign)
                self.state = 949
                self.theTypeId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleTemplateIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateName(self):
            return self.getTypedRuleContext(myParser.TemplateNameContext,0)


        def Less(self):
            return self.getToken(myParser.Less, 0)

        def Greater(self):
            return self.getToken(myParser.Greater, 0)

        def templateArgumentList(self):
            return self.getTypedRuleContext(myParser.TemplateArgumentListContext,0)


        def getRuleIndex(self):
            return myParser.RULE_simpleTemplateId

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleTemplateId" ):
                return visitor.visitSimpleTemplateId(self)
            else:
                return visitor.visitChildren(self)




    def simpleTemplateId(self):

        localctx = myParser.SimpleTemplateIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_simpleTemplateId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.templateName()
            self.state = 953
            self.match(myParser.Less)
            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.IntegerLiteral) | (1 << myParser.CharacterLiteral) | (1 << myParser.FloatingLiteral) | (1 << myParser.StringLiteral) | (1 << myParser.BooleanLiteral) | (1 << myParser.PointerLiteral) | (1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Char) | (1 << myParser.Class) | (1 << myParser.Const) | (1 << myParser.Delete) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.New) | (1 << myParser.Operator) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Sizeof) | (1 << myParser.Struct))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (myParser.Unsigned - 75)) | (1 << (myParser.Void - 75)) | (1 << (myParser.Volatile - 75)) | (1 << (myParser.LeftParen - 75)) | (1 << (myParser.Plus - 75)) | (1 << (myParser.Minus - 75)) | (1 << (myParser.Star - 75)) | (1 << (myParser.And - 75)) | (1 << (myParser.Or - 75)) | (1 << (myParser.Tilde - 75)) | (1 << (myParser.Not - 75)) | (1 << (myParser.PlusPlus - 75)) | (1 << (myParser.MinusMinus - 75)) | (1 << (myParser.Doublecolon - 75)) | (1 << (myParser.Identifier - 75)) | (1 << (myParser.Stack - 75)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (myParser.Push - 139)) | (1 << (myParser.Empty - 139)) | (1 << (myParser.Pop - 139)) | (1 << (myParser.Top - 139)) | (1 << (myParser.Cin - 139)) | (1 << (myParser.Cout - 139)) | (1 << (myParser.String - 139)) | (1 << (myParser.Length - 139)) | (1 << (myParser.Vector - 139)) | (1 << (myParser.Find - 139)) | (1 << (myParser.Push_back - 139)))) != 0):
                self.state = 954
                self.templateArgumentList()


            self.state = 957
            self.match(myParser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleTemplateId(self):
            return self.getTypedRuleContext(myParser.SimpleTemplateIdContext,0)


        def Less(self):
            return self.getToken(myParser.Less, 0)

        def Greater(self):
            return self.getToken(myParser.Greater, 0)

        def operatorFunctionId(self):
            return self.getTypedRuleContext(myParser.OperatorFunctionIdContext,0)


        def literalOperatorId(self):
            return self.getTypedRuleContext(myParser.LiteralOperatorIdContext,0)


        def templateArgumentList(self):
            return self.getTypedRuleContext(myParser.TemplateArgumentListContext,0)


        def getRuleIndex(self):
            return myParser.RULE_templateId

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateId" ):
                return visitor.visitTemplateId(self)
            else:
                return visitor.visitChildren(self)




    def templateId(self):

        localctx = myParser.TemplateIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_templateId)
        self._la = 0 # Token type
        try:
            self.state = 970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [myParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 959
                self.simpleTemplateId()
                pass
            elif token in [myParser.Operator]:
                self.enterOuterAlt(localctx, 2)
                self.state = 962
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 960
                    self.operatorFunctionId()
                    pass

                elif la_ == 2:
                    self.state = 961
                    self.literalOperatorId()
                    pass


                self.state = 964
                self.match(myParser.Less)
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.IntegerLiteral) | (1 << myParser.CharacterLiteral) | (1 << myParser.FloatingLiteral) | (1 << myParser.StringLiteral) | (1 << myParser.BooleanLiteral) | (1 << myParser.PointerLiteral) | (1 << myParser.Auto) | (1 << myParser.Bool) | (1 << myParser.Char) | (1 << myParser.Class) | (1 << myParser.Const) | (1 << myParser.Delete) | (1 << myParser.Double) | (1 << myParser.Float) | (1 << myParser.Int) | (1 << myParser.Long) | (1 << myParser.New) | (1 << myParser.Operator) | (1 << myParser.Short) | (1 << myParser.Signed) | (1 << myParser.Sizeof) | (1 << myParser.Struct))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (myParser.Unsigned - 75)) | (1 << (myParser.Void - 75)) | (1 << (myParser.Volatile - 75)) | (1 << (myParser.LeftParen - 75)) | (1 << (myParser.Plus - 75)) | (1 << (myParser.Minus - 75)) | (1 << (myParser.Star - 75)) | (1 << (myParser.And - 75)) | (1 << (myParser.Or - 75)) | (1 << (myParser.Tilde - 75)) | (1 << (myParser.Not - 75)) | (1 << (myParser.PlusPlus - 75)) | (1 << (myParser.MinusMinus - 75)) | (1 << (myParser.Doublecolon - 75)) | (1 << (myParser.Identifier - 75)) | (1 << (myParser.Stack - 75)))) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (myParser.Push - 139)) | (1 << (myParser.Empty - 139)) | (1 << (myParser.Pop - 139)) | (1 << (myParser.Top - 139)) | (1 << (myParser.Cin - 139)) | (1 << (myParser.Cout - 139)) | (1 << (myParser.String - 139)) | (1 << (myParser.Length - 139)) | (1 << (myParser.Vector - 139)) | (1 << (myParser.Find - 139)) | (1 << (myParser.Push_back - 139)))) != 0):
                    self.state = 965
                    self.templateArgumentList()


                self.state = 968
                self.match(myParser.Greater)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(myParser.Identifier, 0)

        def getRuleIndex(self):
            return myParser.RULE_templateName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateName" ):
                return visitor.visitTemplateName(self)
            else:
                return visitor.visitChildren(self)




    def templateName(self):

        localctx = myParser.TemplateNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_templateName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.match(myParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(myParser.TemplateArgumentContext)
            else:
                return self.getTypedRuleContext(myParser.TemplateArgumentContext,i)


        def Ellipsis(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Ellipsis)
            else:
                return self.getToken(myParser.Ellipsis, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Comma)
            else:
                return self.getToken(myParser.Comma, i)

        def getRuleIndex(self):
            return myParser.RULE_templateArgumentList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateArgumentList" ):
                return visitor.visitTemplateArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def templateArgumentList(self):

        localctx = myParser.TemplateArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_templateArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.templateArgument()
            self.state = 976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==myParser.Ellipsis:
                self.state = 975
                self.match(myParser.Ellipsis)


            self.state = 985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==myParser.Comma:
                self.state = 978
                self.match(myParser.Comma)
                self.state = 979
                self.templateArgument()
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==myParser.Ellipsis:
                    self.state = 980
                    self.match(myParser.Ellipsis)


                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def theTypeId(self):
            return self.getTypedRuleContext(myParser.TheTypeIdContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(myParser.ConstantExpressionContext,0)


        def idExpression(self):
            return self.getTypedRuleContext(myParser.IdExpressionContext,0)


        def getRuleIndex(self):
            return myParser.RULE_templateArgument

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateArgument" ):
                return visitor.visitTemplateArgument(self)
            else:
                return visitor.visitChildren(self)




    def templateArgument(self):

        localctx = myParser.TemplateArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_templateArgument)
        try:
            self.state = 991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 988
                self.theTypeId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 989
                self.constantExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 990
                self.idExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitInstantiationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(myParser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(myParser.DeclarationContext,0)


        def getRuleIndex(self):
            return myParser.RULE_explicitInstantiation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitInstantiation" ):
                return visitor.visitExplicitInstantiation(self)
            else:
                return visitor.visitChildren(self)




    def explicitInstantiation(self):

        localctx = myParser.ExplicitInstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_explicitInstantiation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(myParser.Template)
            self.state = 994
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TheOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(myParser.New, 0)

        def LeftBracket(self):
            return self.getToken(myParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(myParser.RightBracket, 0)

        def Delete(self):
            return self.getToken(myParser.Delete, 0)

        def Plus(self):
            return self.getToken(myParser.Plus, 0)

        def Minus(self):
            return self.getToken(myParser.Minus, 0)

        def Star(self):
            return self.getToken(myParser.Star, 0)

        def Div(self):
            return self.getToken(myParser.Div, 0)

        def Mod(self):
            return self.getToken(myParser.Mod, 0)

        def Caret(self):
            return self.getToken(myParser.Caret, 0)

        def And(self):
            return self.getToken(myParser.And, 0)

        def Or(self):
            return self.getToken(myParser.Or, 0)

        def Tilde(self):
            return self.getToken(myParser.Tilde, 0)

        def Not(self):
            return self.getToken(myParser.Not, 0)

        def Assign(self):
            return self.getToken(myParser.Assign, 0)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Greater)
            else:
                return self.getToken(myParser.Greater, i)

        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(myParser.Less)
            else:
                return self.getToken(myParser.Less, i)

        def GreaterEqual(self):
            return self.getToken(myParser.GreaterEqual, 0)

        def PlusAssign(self):
            return self.getToken(myParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(myParser.MinusAssign, 0)

        def StarAssign(self):
            return self.getToken(myParser.StarAssign, 0)

        def ModAssign(self):
            return self.getToken(myParser.ModAssign, 0)

        def XorAssign(self):
            return self.getToken(myParser.XorAssign, 0)

        def AndAssign(self):
            return self.getToken(myParser.AndAssign, 0)

        def OrAssign(self):
            return self.getToken(myParser.OrAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(myParser.RightShiftAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(myParser.LeftShiftAssign, 0)

        def Equal(self):
            return self.getToken(myParser.Equal, 0)

        def NotEqual(self):
            return self.getToken(myParser.NotEqual, 0)

        def LessEqual(self):
            return self.getToken(myParser.LessEqual, 0)

        def AndAnd(self):
            return self.getToken(myParser.AndAnd, 0)

        def OrOr(self):
            return self.getToken(myParser.OrOr, 0)

        def PlusPlus(self):
            return self.getToken(myParser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(myParser.MinusMinus, 0)

        def Comma(self):
            return self.getToken(myParser.Comma, 0)

        def ArrowStar(self):
            return self.getToken(myParser.ArrowStar, 0)

        def Arrow(self):
            return self.getToken(myParser.Arrow, 0)

        def LeftParen(self):
            return self.getToken(myParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(myParser.RightParen, 0)

        def getRuleIndex(self):
            return myParser.RULE_theOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheOperator" ):
                return visitor.visitTheOperator(self)
            else:
                return visitor.visitChildren(self)




    def theOperator(self):

        localctx = myParser.TheOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_theOperator)
        try:
            self.state = 1047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 996
                self.match(myParser.New)
                self.state = 999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 997
                    self.match(myParser.LeftBracket)
                    self.state = 998
                    self.match(myParser.RightBracket)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1001
                self.match(myParser.Delete)
                self.state = 1004
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1002
                    self.match(myParser.LeftBracket)
                    self.state = 1003
                    self.match(myParser.RightBracket)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1006
                self.match(myParser.Plus)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1007
                self.match(myParser.Minus)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1008
                self.match(myParser.Star)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1009
                self.match(myParser.Div)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1010
                self.match(myParser.Mod)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1011
                self.match(myParser.Caret)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1012
                self.match(myParser.And)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1013
                self.match(myParser.Or)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1014
                self.match(myParser.Tilde)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1015
                self.match(myParser.Not)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1016
                self.match(myParser.Assign)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1017
                self.match(myParser.Greater)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1018
                self.match(myParser.Less)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1019
                self.match(myParser.GreaterEqual)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1020
                self.match(myParser.PlusAssign)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1021
                self.match(myParser.MinusAssign)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1022
                self.match(myParser.StarAssign)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1023
                self.match(myParser.ModAssign)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1024
                self.match(myParser.XorAssign)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1025
                self.match(myParser.AndAssign)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1026
                self.match(myParser.OrAssign)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1027
                self.match(myParser.Less)
                self.state = 1028
                self.match(myParser.Less)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1029
                self.match(myParser.Greater)
                self.state = 1030
                self.match(myParser.Greater)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1031
                self.match(myParser.RightShiftAssign)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1032
                self.match(myParser.LeftShiftAssign)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1033
                self.match(myParser.Equal)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1034
                self.match(myParser.NotEqual)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1035
                self.match(myParser.LessEqual)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1036
                self.match(myParser.AndAnd)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1037
                self.match(myParser.OrOr)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1038
                self.match(myParser.PlusPlus)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1039
                self.match(myParser.MinusMinus)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1040
                self.match(myParser.Comma)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1041
                self.match(myParser.ArrowStar)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1042
                self.match(myParser.Arrow)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1043
                self.match(myParser.LeftParen)
                self.state = 1044
                self.match(myParser.RightParen)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1045
                self.match(myParser.LeftBracket)
                self.state = 1046
                self.match(myParser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(myParser.IntegerLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(myParser.CharacterLiteral, 0)

        def FloatingLiteral(self):
            return self.getToken(myParser.FloatingLiteral, 0)

        def StringLiteral(self):
            return self.getToken(myParser.StringLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(myParser.BooleanLiteral, 0)

        def PointerLiteral(self):
            return self.getToken(myParser.PointerLiteral, 0)

        def getRuleIndex(self):
            return myParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = myParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << myParser.IntegerLiteral) | (1 << myParser.CharacterLiteral) | (1 << myParser.FloatingLiteral) | (1 << myParser.StringLiteral) | (1 << myParser.BooleanLiteral) | (1 << myParser.PointerLiteral))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MyIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Length(self):
            return self.getToken(myParser.Length, 0)

        def Push(self):
            return self.getToken(myParser.Push, 0)

        def Empty(self):
            return self.getToken(myParser.Empty, 0)

        def Pop(self):
            return self.getToken(myParser.Pop, 0)

        def Top(self):
            return self.getToken(myParser.Top, 0)

        def Cin(self):
            return self.getToken(myParser.Cin, 0)

        def Cout(self):
            return self.getToken(myParser.Cout, 0)

        def Find(self):
            return self.getToken(myParser.Find, 0)

        def Push_back(self):
            return self.getToken(myParser.Push_back, 0)

        def getRuleIndex(self):
            return myParser.RULE_myId

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMyId" ):
                return visitor.visitMyId(self)
            else:
                return visitor.visitChildren(self)




    def myId(self):

        localctx = myParser.MyIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_myId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            _la = self._input.LA(1)
            if not(((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (myParser.Push - 139)) | (1 << (myParser.Empty - 139)) | (1 << (myParser.Pop - 139)) | (1 << (myParser.Top - 139)) | (1 << (myParser.Cin - 139)) | (1 << (myParser.Cout - 139)) | (1 << (myParser.Length - 139)) | (1 << (myParser.Find - 139)) | (1 << (myParser.Push_back - 139)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MyClassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Stack(self):
            return self.getToken(myParser.Stack, 0)

        def Vector(self):
            return self.getToken(myParser.Vector, 0)

        def String(self):
            return self.getToken(myParser.String, 0)

        def getRuleIndex(self):
            return myParser.RULE_myClass

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMyClass" ):
                return visitor.visitMyClass(self)
            else:
                return visitor.visitChildren(self)




    def myClass(self):

        localctx = myParser.MyClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_myClass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            _la = self._input.LA(1)
            if not(((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (myParser.Stack - 138)) | (1 << (myParser.String - 138)) | (1 << (myParser.Vector - 138)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[3] = self.postfixExpression_sempred
        self._predicates[9] = self.noPointerNewDeclarator_sempred
        self._predicates[55] = self.noPointerDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def postfixExpression_sempred(self, localctx:PostfixExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def noPointerNewDeclarator_sempred(self, localctx:NoPointerNewDeclaratorContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def noPointerDeclarator_sempred(self, localctx:NoPointerDeclaratorContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         




